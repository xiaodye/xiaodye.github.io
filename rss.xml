<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://vuepress-theme-hope-demo.mrhope.site/rss.xml" rel="self" type="application/rss+xml"/>
    <title>小染的妙事屋</title>
    <link>https://vuepress-theme-hope-demo.mrhope.site/</link>
    <description>弱小和无知从来就不是一个文明毁灭的原因，傲慢才是。 --三体</description>
    <language>zh-CN</language>
    <pubDate>Mon, 25 Apr 2022 13:47:43 GMT</pubDate>
    <lastBuildDate>Mon, 25 Apr 2022 13:47:43 GMT</lastBuildDate>
    <generator>@mr-hope/vuepress-plugin-feed</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>ES6</category>
    <category>使用指南</category>
    <category>小程序</category>
    <category>JavaScript</category>
    <category>VSCode</category>
    <category>大学</category>
    <category>Vue</category>
    <item>
      <title>项目主页</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/rss.xml">项目主页</source>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>从简到难，重新学习ES6（上）</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/es6/%E4%BB%8E%E7%AE%80%E5%88%B0%E9%9A%BE%EF%BC%8C%E9%87%8D%E6%96%B0%E5%AD%A6%E4%B9%A0ES6%EF%BC%88%E4%B8%8A%EF%BC%89/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/es6/%E4%BB%8E%E7%AE%80%E5%88%B0%E9%9A%BE%EF%BC%8C%E9%87%8D%E6%96%B0%E5%AD%A6%E4%B9%A0ES6%EF%BC%88%E4%B8%8A%EF%BC%89/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/rss.xml">从简到难，重新学习ES6（上）</source>
      <category>ES6</category>
      <pubDate>Thu, 10 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="前言"> 前言</h2>
<p>本文主要介绍 ES6 的内容，作者是在 b 站跟一个视频学习的<a href="https://www.bilibili.com/video/BV1uK411H7on?p=1" target="_blank" rel="noopener noreferrer">https://www.bilibili.com/video/BV1uK411H7on?p=1</a>，然后我根据视频和资料做了一些总结性的工作，希望可以给刚入门 ES6 的小伙伴一些帮助，内容比较多，我会根据简单到难，分好几次来讲，我自己也做了张思维导图，让知识更体系，帮助加深印象。</p>
<p><img src="https://s2.loli.net/2022/02/10/PmwJjXyfpbE9euU.png" alt="ES6" loading="lazy"></p>
<h2 id="es6-介绍"> ES6 介绍</h2>
<p>ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。ES6 既是一个历史名词，也是一个泛指，含义是 5.1 版以后的 JavaScript 的下一代标准，涵盖了 ES2015、ES2016、ES2017 、ES2018 等等。</p>
<h2 id="一、数据相关的新特性"> 一、数据相关的新特性</h2>
<h3 id="let-关键字"> let 关键字</h3>
<p>使用<code>let</code> 关键字用来声明变量，具有以下几个特性：</p>
<ul>
<li>不允许重复声明</li>
<li>块儿级作用域</li>
<li>不存在变量提升</li>
<li>不影响作用域链</li>
</ul>
<div><pre><code><span>// 1.不允许重复声明</span>
<span>let</span> a <span>=</span> <span>1</span><span>;</span>
<span>let</span> a <span>=</span> <span>2</span><span>;</span> <span>// 不允许，会报错，但var不会</span>

<span>// 2.块儿级作用域</span>
<span>{</span>
  <span>let</span> dog <span>=</span> <span>"狗"</span><span>;</span>
  console<span>.</span><span>log</span><span>(</span>dog<span>)</span><span>;</span>
<span>}</span>
console<span>.</span><span>log</span><span>(</span>dog<span>)</span><span>;</span> <span>// 报错，但var声明不会，因为var没有块级作用域</span>

<span>// 3.不存在变量提升</span>
console<span>.</span><span>log</span><span>(</span>d1<span>)</span><span>;</span> <span>// 不报错</span>
console<span>.</span><span>log</span><span>(</span>d2<span>)</span><span>;</span> <span>// 报错</span>
<span>var</span> d1 <span>=</span> <span>"d1"</span><span>;</span>
<span>let</span> d2 <span>=</span> <span>"d2"</span><span>;</span>

<span>// 4.不影响作用域链</span>
<span>{</span>
  <span>let</span> p <span>=</span> <span>"人"</span><span>;</span>
  <span>function</span> <span>fn</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span>p<span>)</span><span>;</span> <span>// 这里是可以使用的</span>
  <span>}</span>
  <span>fn</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><blockquote>
<p><strong>应用场景</strong>：以后声明变量用 <code>let</code> 就对了</p>
</blockquote>
<h3 id="const-关键字"> const 关键字</h3>
<p>使用<code>const</code>关键字用来声明常量，具有以下几个特性：</p>
<ul>
<li>声明必须赋初始值</li>
<li>标识符一般为大写（潜规则，看场景）</li>
<li>值不允许修改（注意<code>数组</code>、<code>对象</code>等引用数据类型）</li>
</ul>
<blockquote>
<p><strong>注意</strong>：<code>const</code>关键字具有<code>let</code>关键字的所有特性，意思是上面<code>let</code>所列举的特性<code>const</code>都有。</p>
</blockquote>
<p>这里就只演示最后一个特性</p>
<div><pre><code><span>const</span> person <span>=</span> <span>"张三"</span><span>;</span>
person <span>=</span> <span>"李四"</span><span>;</span> <span>//报错</span>

<span>//数组和对象存的是引用地址，下列操作未改变地址，所以是可行的</span>
<span>const</span> p <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>"张三"</span><span>,</span>
  <span>age</span><span>:</span> <span>18</span><span>,</span>
<span>}</span><span>;</span>
p<span>.</span>age <span>=</span> <span>20</span><span>;</span> <span>// 没有问题</span>

<span>const</span> arr <span>=</span> <span>[</span><span>"pink"</span><span>,</span> <span>"green"</span><span>]</span><span>;</span>
arr<span>.</span><span>push</span><span>(</span><span>"blue"</span><span>)</span><span>;</span> <span>// 没有问题</span>

arr <span>=</span> <span>[</span><span>"blank"</span><span>,</span> <span>"white"</span><span>]</span><span>;</span> <span>// 改变了地址，报错</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h3 id="解构赋值"> 解构赋值</h3>
<p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构赋值。</p>
<div><pre><code><span>// 数组的解构赋值</span>
<span>const</span> arr <span>=</span> <span>[</span><span>"张学友"</span><span>,</span> <span>"刘德华"</span><span>,</span> <span>"黎明"</span><span>,</span> <span>"郭富城"</span><span>]</span><span>;</span>
<span>let</span> <span>[</span>zhang<span>,</span> liu<span>,</span> li<span>,</span> guo<span>]</span> <span>=</span> arr<span>;</span>

<span>// 对象的解构赋值</span>
<span>let</span> obj <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>"张三"</span><span>,</span>
  <span>age</span><span>:</span> <span>17</span><span>,</span>
  <span>say</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>"唱歌"</span><span>)</span><span>;</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>
<span>let</span> <span>{</span> name<span>,</span> age<span>,</span> say <span>}</span> <span>=</span> obj<span>;</span> <span>// 一定要对应key，顺序无所谓，少了也没关系</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h3 id="模板字符串"> 模板字符串</h3>
<p>模板字符串（template string）是增强版的字符串，本质还是字符串，用反引号（`）标识，具有以下特性：</p>
<ul>
<li>字符串中可以出现换行</li>
<li>可以使用 ${xxx} 形式输出变量</li>
</ul>
<div><pre><code><span>let</span> str <span>=</span> <span><span>`</span><span>&lt;ul>
							&lt;li>唱歌&lt;/li>
    					&lt;li>跳舞&lt;/li>
 							&lt;li>rap&lt;/li>
 					 &lt;/ul></span><span>`</span></span><span>;</span>

<span>// 变量拼接</span>
<span>let</span> name <span>=</span> <span>"张三"</span><span>;</span>
<span>let</span> str2 <span>=</span> <span>"我的名字叫${name}"</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id="简化对象写法"> 简化对象写法</h3>
<p>ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。</p>
<div><pre><code><span>let</span> name <span>=</span> <span>"李四"</span><span>;</span>
<span>let</span> <span>hello</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>"hello"</span><span>)</span><span>;</span>
<span>}</span><span>;</span>

<span>const</span> obj <span>=</span> <span>{</span>
  name<span>,</span> <span>// 触发同名简写规则</span>
  <span>age</span><span>:</span> <span>18</span><span>,</span>
  hello<span>,</span> <span>// 触发同名简写规则</span>
  <span>get</span><span>:</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
    <span>return</span> name<span>;</span>
  <span>}</span><span>,</span>
  <span>set</span><span>(</span>val<span>)</span> <span>{</span>
    <span>this</span><span>.</span>name <span>=</span> val<span>;</span>
  <span>}</span><span>,</span> <span>// 函数简写</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h3 id="set"> Set</h3>
<p>ES6 提供了新的数据结构 Set（集合）。它类似于数组，但成员的值都是唯 一的，集合实现了 iterator 接口，所以可以使用『扩展运算符』和『for…of…』进 行遍历，<code>Set</code>的常用的属性和方法有：</p>
<ul>
<li>size 返回集合的元素个数</li>
<li>add 增加一个新元素，返回当前集合</li>
<li>delete 删除元素，返回 boolean 值</li>
<li>has 检测集合中是否包含某个元素，返回 boolean 值</li>
<li>clear 清空集合，返回 <code>undefined</code></li>
</ul>
<div><pre><code><span>//创建一个空集合</span>
<span>let</span> s <span>=</span> <span>new</span> <span>Set</span><span>(</span><span>)</span><span>;</span>
<span>//创建一个非空集合</span>
<span>let</span> s1 <span>=</span> <span>new</span> <span>Set</span><span>(</span><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>)</span><span>;</span> <span>// [1,2,3],会自动去重</span>

console<span>.</span><span>log</span><span>(</span>s1<span>.</span>size<span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>s1<span>.</span><span>add</span><span>(</span><span>4</span><span>)</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>s1<span>.</span><span>delete</span><span>(</span><span>1</span><span>)</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>s1<span>.</span><span>has</span><span>(</span><span>2</span><span>)</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>s1<span>.</span><span>clear</span><span>(</span><span>)</span><span>)</span><span>;</span> <span>// undefined</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p><code>Set</code>的一些实践：</p>
<div><pre><code><span>let</span> arr <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>,</span> <span>4</span><span>,</span> <span>3</span><span>,</span> <span>2</span><span>,</span> <span>1</span><span>]</span><span>;</span>

<span>// 数组去重</span>
<span>let</span> s1 <span>=</span> <span>new</span> <span>Set</span><span>(</span>arr<span>)</span><span>;</span>

<span>// 交集</span>
<span>let</span> arr2 <span>=</span> <span>[</span><span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>,</span> <span>6</span><span>,</span> <span>5</span><span>,</span> <span>4</span><span>,</span> <span>3</span><span>]</span><span>;</span>
<span>let</span> result <span>=</span> <span>[</span><span>...</span><span>new</span> <span>Set</span><span>(</span>arr<span>)</span><span>]</span><span>.</span><span>filter</span><span>(</span><span>item</span> <span>=></span> <span>new</span> <span>Set</span><span>(</span>arr2<span>)</span><span>.</span><span>has</span><span>(</span>item<span>)</span><span>)</span><span>;</span>

<span>// 并集</span>
<span>let</span> union <span>=</span> <span>[</span><span>...</span><span>new</span> <span>Set</span><span>(</span><span>[</span><span>...</span>arr<span>,</span> <span>...</span>arr2<span>]</span><span>)</span><span>]</span><span>;</span>

<span>// 差集：比如集合A和集合B求差集，就是A里面有的，B里面没有(A - B)</span>
<span>let</span> result2 <span>=</span> <span>[</span><span>...</span><span>new</span> <span>Set</span><span>(</span>arr<span>)</span><span>]</span><span>.</span><span>filter</span><span>(</span><span>item</span> <span>=></span> <span>!</span><span>new</span> <span>Set</span><span>(</span>arr2<span>)</span><span>.</span><span>has</span><span>(</span>item<span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h3 id="map"> Map</h3>
<p>ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合。但是“键”的范围不限于字符串，各种类 型的值（包括对象）都可以当作键，<strong>差不多就是对象的加强版</strong>。Map 也实现了 iterator 接口，所以可以使用『扩展运算符』和 『for…of…』进行遍历。</p>
<p><code>Map</code>常用的属性和方法：</p>
<ul>
<li>size 返回 Map 的元素个数</li>
<li>set 增加一个新元素，返回当前 Map</li>
<li>get 返回键名对象的键值</li>
<li>has 检测 Map 中是否包含某个元素，返回 boolean 值</li>
<li>clear 清空集合，返回 <code>undefined</code></li>
</ul>
<div><pre><code><span>// 创建一个空 map</span>
<span>let</span> m <span>=</span> <span>new</span> <span>Map</span><span>(</span><span>)</span><span>;</span>
<span>// 创建一个非空 map</span>
<span>let</span> m2 <span>=</span> <span>new</span> <span>Map</span><span>(</span><span>[</span>
  <span>[</span><span>"name"</span><span>,</span> <span>"尚硅谷"</span><span>]</span><span>,</span>
  <span>[</span><span>"slogon"</span><span>,</span> <span>"不断提高行业标准"</span><span>]</span><span>,</span>
<span>]</span><span>)</span><span>;</span>

console<span>.</span><span>log</span><span>(</span>m2<span>.</span>size<span>)</span><span>;</span>

<span>// set 增加一个新元素，返回当前 Map；</span>
m2<span>.</span><span>set</span><span>(</span><span>"age"</span><span>,</span> <span>18</span><span>)</span><span>;</span>

<span>// “键”的范围不限于字符串</span>
<span>let</span> <span>fn</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>"我是函数"</span><span>)</span><span>;</span>
<span>}</span><span>;</span>
m2<span>.</span><span>set</span><span>(</span><span>"key"</span><span>,</span> fn<span>)</span><span>;</span>

<span>// get 返回键名对象的键值</span>
m2<span>.</span><span>get</span><span>(</span><span>"age"</span><span>)</span><span>;</span>

<span>// has 检测 Map 中是否包含某个元素，返回 boolean 值</span>
console<span>.</span><span>log</span><span>(</span>m<span>.</span><span>has</span><span>(</span><span>"name"</span><span>)</span><span>)</span><span>;</span> <span>// true</span>

<span>// clear 清空集合，返回 undefined</span>
m2<span>.</span><span>clear</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><h2 id="二、函数相关的新特性"> 二、函数相关的新特性</h2>
<h3 id="es6-中函数参数的默认值"> ES6 中函数参数的默认值</h3>
<p>ES6 允许给函数的参数赋初始值。</p>
<div><pre><code><span>//形参初始值 具有默认值的参数, 一般位置要靠后</span>
<span>function</span> <span>sum</span><span>(</span><span>a<span>,</span> b<span>,</span> c <span>=</span> <span>3</span></span><span>)</span> <span>{</span>
  <span>return</span> a <span>+</span> b <span>+</span> c<span>;</span>
<span>}</span>
<span>sum</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>)</span><span>;</span> <span>//结果6</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="箭头函数"> 箭头函数</h3>
<p>ES6 允许使用箭头（=&gt;）定义函数，箭头函数提供了一种更加简洁的函数书写方式，并且箭头函数在开发中的使用是非常广泛的。箭头函数具有以下特性：</p>
<ul>
<li>如果形参只有一个，则小括号可以省略</li>
<li>函数体如果只有一条语句，则花括号可以省略，函数的返回值为该条语句的执行结果</li>
<li><strong>箭头函数的 this 是静态的，始终指向函数声明时所在作用域下的 this 的值</strong></li>
<li>箭头函数不能作为构造函数实例化</li>
<li>不能使用 arguments</li>
</ul>
<div><pre><code><span>// 1. 通用写法</span>
<span>let</span> <span>fn</span> <span>=</span> <span>(</span><span>a<span>,</span> b</span><span>)</span> <span>=></span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span>a <span>+</span> b<span>)</span><span>;</span>
  <span>return</span> a <span>+</span> b<span>;</span>
<span>}</span><span>;</span>
<span>// 2. 省略小括号的情况，只有一个参数，无参数不能省略小括号</span>
<span>let</span> <span>fn2</span> <span>=</span> <span>num</span> <span>=></span> <span>{</span>
  <span>return</span> num<span>;</span>
<span>}</span><span>;</span>
<span>// 3. 省略花括号的情况，只有一条return语句</span>
<span>let</span> <span>fn3</span> <span>=</span> <span>score</span> <span>=></span> score <span>*</span> <span>20</span><span>;</span>

<span>// 箭头函数的this是静态的，始终指向函数声明时所在作用域下的this的值</span>
console<span>.</span><span>log</span><span>(</span><span>this</span><span>)</span><span>;</span> <span>// windows</span>

<span>let</span> school <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>"尚硅谷"</span><span>,</span>
  <span>getThis</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>this</span><span>)</span><span>;</span>
  <span>}</span><span>,</span>
  <span>getThis2</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>this</span><span>)</span><span>;</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>
school<span>.</span><span>getThis</span><span>(</span><span>)</span><span>;</span> <span>// windows</span>
school<span>.</span><span>getThis2</span><span>(</span><span>)</span><span>;</span> <span>// school</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><h3 id="rest-参数-args"> rest 参数（...args）</h3>
<p>ES6 引入 rest 参数，用于获取函数的实参，作用与 arguments 类似，用来代替 arguments，</p>
<ul>
<li>rest 参数必须是最后一个形参</li>
</ul>
<div><pre><code><span>function</span> <span>sum</span><span>(</span><span><span>...</span>args</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span>args<span>)</span><span>;</span>
<span>}</span>
<span>let</span> <span>add</span> <span>=</span> <span>(</span><span><span>...</span>args</span><span>)</span> <span>=></span> args<span>;</span>
<span>sum</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>)</span><span>;</span> <span>// [1, 2, 3]</span>
console<span>.</span><span>log</span><span>(</span><span>add</span><span>(</span><span>4</span><span>,</span> <span>5</span><span>,</span> <span>6</span><span>)</span><span>)</span><span>;</span> <span>// [4, 5, 6]</span>

<span>//rest 参数必须是最后一个形参</span>
<span>function</span> <span>sum2</span><span>(</span><span>a<span>,</span> b<span>,</span> <span>...</span>args</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span>args<span>)</span><span>;</span>
<span>}</span>
<span>sum2</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>)</span><span>;</span> <span>// [3,4,5]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><blockquote>
<p><strong>注意</strong>：<code>rest参数</code>非常适合不定个数参数函数的场景</p>
</blockquote>
<h3 id="spread-扩展运算符"> spread 扩展运算符（...）</h3>
<p>扩展运算符（spread）也是三个点（...）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列，对数组进行解包。</p>
<div><pre><code><span>// 展开数组</span>
<span>let</span> heros <span>=</span> <span>[</span><span>"德玛西亚之力"</span><span>,</span> <span>"德玛西亚之翼"</span><span>,</span> <span>"德玛西亚皇子"</span><span>]</span><span>;</span>
<span>function</span> <span>fn</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span>arguments<span>)</span><span>;</span>
<span>}</span>
<span>fn</span><span>(</span><span>...</span>heros<span>)</span><span>;</span>

<span>// 展开对象</span>
<span>let</span> skillOne <span>=</span> <span>{</span>
  <span>q</span><span>:</span> <span>"致命打击"</span><span>,</span>
<span>}</span><span>;</span>
<span>let</span> skillTwo <span>=</span> <span>{</span>
  <span>w</span><span>:</span> <span>"勇气"</span><span>,</span>
<span>}</span><span>;</span>
<span>let</span> skillThree <span>=</span> <span>{</span>
  <span>e</span><span>:</span> <span>"审判"</span><span>,</span>
<span>}</span><span>;</span>
<span>let</span> skillFour <span>=</span> <span>{</span>
  <span>r</span><span>:</span> <span>"德玛西亚正义"</span><span>,</span>
<span>}</span><span>;</span>

<span>let</span> gaiLun <span>=</span> <span>{</span> <span>...</span>skillOne<span>,</span> <span>...</span>skillTwo<span>,</span> <span>...</span>skillThree<span>,</span> <span>...</span>skillFour <span>}</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>gaiLun<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p><img src="https://s2.loli.net/2022/01/30/63lRdPhvGNIEmXJ.png" alt="image-20220130225719819" loading="lazy"></p>
<blockquote>
<p><strong>扩展运算符的常用应用场景</strong>：</p>
</blockquote>
<ul>
<li>数组的合并</li>
<li>数组的克隆</li>
<li>将伪数组转为真正的数组</li>
</ul>
<div><pre><code><span>// 1.数组的合并</span>
<span>let</span> colors1 <span>=</span> <span>[</span><span>"blue"</span><span>,</span> <span>"yellow"</span><span>,</span> <span>"red"</span><span>]</span><span>;</span>
<span>let</span> colors2 <span>=</span> <span>[</span><span>"pink"</span><span>,</span> <span>"green"</span><span>]</span><span>;</span>
<span>let</span> colors <span>=</span> <span>[</span><span>...</span>colors1<span>,</span> <span>...</span>colors2<span>]</span><span>;</span> <span>// ["blue","yellow","red","pink","green"]</span>

<span>// 2.数组的克隆</span>
<span>const</span> sanzhihua <span>=</span> <span>[</span><span>"E"</span><span>,</span> <span>"G"</span><span>,</span> <span>"M"</span><span>]</span><span>;</span>
<span>const</span> sanyecao <span>=</span> <span>[</span><span>...</span>sanzhihua<span>]</span><span>;</span> <span>// ['E','G','M']</span>

<span>//3. 将伪数组转为真正的数组</span>
<span>const</span> divs <span>=</span> document<span>.</span><span>querySelectorAll</span><span>(</span><span>"div"</span><span>)</span><span>;</span>
<span>const</span> divArr <span>=</span> <span>[</span><span>...</span>divs<span>]</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h2 id="最后"> 最后</h2>
<p>如果哪里讲的不对，还望指出。</p>
]]></content:encoded>
      <enclosure url="https://s2.loli.net/2022/02/10/PmwJjXyfpbE9euU.png" type="image/png"/>
    </item>
    <item>
      <title>从简到难，重新学习ES6（中）</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/es6/%E4%BB%8E%E7%AE%80%E5%88%B0%E9%9A%BE%EF%BC%8C%E9%87%8D%E6%96%B0%E5%AD%A6%E4%B9%A0ES6%EF%BC%88%E4%B8%AD%EF%BC%89/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/es6/%E4%BB%8E%E7%AE%80%E5%88%B0%E9%9A%BE%EF%BC%8C%E9%87%8D%E6%96%B0%E5%AD%A6%E4%B9%A0ES6%EF%BC%88%E4%B8%AD%EF%BC%89/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/rss.xml">从简到难，重新学习ES6（中）</source>
      <category>ES6</category>
      <pubDate>Sat, 12 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="开始"> 开始</h2>
<p>上次说了<a href="https://xiaodye.github.io/ES6/%E4%BB%8E%E7%AE%80%E5%88%B0%E9%9A%BE%EF%BC%8C%E9%87%8D%E6%96%B0%E5%AD%A6%E4%B9%A0ES6%EF%BC%88%E4%B8%8A%EF%BC%89/" target="_blank" rel="noopener noreferrer">从简到难，重新学习ES6（上）</a>，这次继续讲（中）。</p>
<p>附上思维导图：</p>
<p><img src="https://s2.loli.net/2022/02/12/zHTKWbgyxQa8qfk.png" alt="ES6(中)" loading="lazy"></p>
<h2 id="class"> class</h2>
<p>ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对 象的模板。通过 class 关键字，可以定义类。基本上，ES6 的 class 可以看作只是 一个<code>语法糖</code>，它的绝大部分功能，ES5 都可以做到，新的 class 写法只是让对象 原型的写法更加清晰、更像面向对象编程的语法而已。</p>
<p><strong>知识点</strong>：</p>
<ul>
<li>class 声明类</li>
<li>constructor 定义构造函数初始化</li>
<li>extends 继承父类</li>
<li>super 调用父级构造方法</li>
<li>static 定义静态方法和属性</li>
<li>父类方法可以重写</li>
</ul>
<h3 id="构造函数和class声明"> 构造函数和class声明</h3>
<div><pre><code><span>//es5写法</span>
<span>function</span> <span>Phone</span><span>(</span><span>brand<span>,</span>price</span><span>)</span><span>{</span>
  <span>this</span><span>.</span>brand <span>=</span> brand<span>;</span>
  <span>this</span><span>.</span>price <span>=</span> price<span>;</span>
<span>}</span>

 <span>// 添加方法</span>
<span>Phone</span><span>.</span>prototype<span>.</span><span>call</span> <span>=</span> <span>function</span><span>(</span><span>)</span><span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>"我可以打电话！"</span><span>)</span><span>;</span>
<span>}</span>
 <span>// 实例化对象</span>
<span>var</span> vivo <span>=</span> <span>new</span> <span>Phone</span><span>(</span><span>"华为"</span><span>,</span><span>5999</span><span>)</span><span>;</span>
<span>vivo</span><span>.</span><span>call</span><span>(</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>vivo<span>)</span><span>;</span>

<span>//es6写法</span>
<span>class</span> <span>Shouji</span> <span>{</span>
  <span>// 构造方法，名字是固定的，会自动调用</span>
  <span>constructor</span><span>(</span><span>brand<span>,</span>price</span><span>)</span><span>{</span>
    <span>this</span><span>.</span>brand <span>=</span> brand<span>;</span>
    <span>this</span><span>.</span>price <span>=</span> price<span>;</span>
  <span>}</span>
  <span>// 打电话，方法必须使用该方式写，不能call:function(){}</span>
  <span>call</span><span>(</span><span>)</span><span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>"我可以打电话！"</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>

<span>let</span> xiaomi <span>=</span> <span>new</span> <span>Shouji</span><span>(</span><span>"小米"</span><span>,</span><span>3999</span><span>)</span>
<span>xiaomi</span><span>.</span><span>call</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><h3 id="class静态成员"> class静态成员</h3>
<div><pre><code><span>//ES6</span>
<span>class</span> <span>Phone</span> <span>{</span>
  <span>static</span> brand <span>=</span> <span>"苹果"</span><span>;</span>
  <span>static</span> <span>change</span><span>(</span><span>)</span><span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>"我可以改变世界！"</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
<span>let</span> huawei <span>=</span> <span>new</span> <span>Phone</span><span>(</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>huawei<span>.</span>brand<span>)</span><span>;</span><span>// undefined</span>
console<span>.</span><span>log</span><span>(</span>Phone<span>.</span>brand<span>)</span><span>;</span><span>// 苹果</span>
Phone<span>.</span><span>change</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id="class中的继承"> class中的继承</h3>
<div><pre><code><span>// ES5构造函数继承</span>
<span>// 手机</span>
<span>function</span> <span>Phone</span><span>(</span><span>brand<span>,</span>price</span><span>)</span><span>{</span>
	<span>this</span><span>.</span>brand <span>=</span> brand<span>;</span>
	<span>this</span><span>.</span>price <span>=</span> price<span>;</span>
<span>}</span>
<span>Phone</span><span>.</span>prototype<span>.</span><span>call</span> <span>=</span> <span>function</span><span>(</span><span>)</span><span>{</span>
	console<span>.</span><span>log</span><span>(</span><span>"我可以打电话！"</span><span>)</span><span>;</span>
<span>}</span>
<span>// 智能手机</span>
<span>function</span> <span>SmartPhone</span><span>(</span><span>brand<span>,</span>price<span>,</span>color<span>,</span>size</span><span>)</span><span>{</span>
	<span>Phone</span><span>.</span><span>call</span><span>(</span><span>this</span><span>,</span>brand<span>,</span>price<span>)</span><span>;</span>
	<span>this</span><span>.</span>color <span>=</span> color<span>;</span>
	<span>this</span><span>.</span>size <span>=</span> size<span>;</span>
<span>}</span>
<span>// 设置子级构造函数的原型</span>
<span>SmartPhone</span><span>.</span>prototype <span>=</span> <span>new</span> <span>Phone</span><span>;</span>
<span>SmartPhone</span><span>.</span>prototype<span>.</span>constructor <span>=</span> SmartPhone<span>;</span>
<span>// 声明子类的方法</span>
<span>SmartPhone</span><span>.</span>prototype<span>.</span><span>photo</span> <span>=</span> <span>function</span><span>(</span><span>)</span><span>{</span>
	console<span>.</span><span>log</span><span>(</span><span>"我可以拍照！"</span><span>)</span><span>;</span>
<span>}</span>
<span>SmartPhone</span><span>.</span>prototype<span>.</span><span>game</span> <span>=</span> <span>function</span><span>(</span><span>)</span><span>{</span>
	console<span>.</span><span>log</span><span>(</span><span>"我可以玩游戏！"</span><span>)</span><span>;</span>
<span>}</span>
<span>const</span> chuizi <span>=</span> <span>new</span> <span>SmartPhone</span><span>(</span><span>"锤子"</span><span>,</span><span>2499</span><span>,</span><span>"黑色"</span><span>,</span><span>"5.5inch"</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>chuizi<span>)</span><span>;</span>
<span>chuizi</span><span>.</span><span>call</span><span>(</span><span>)</span><span>;</span>
chuizi<span>.</span><span>photo</span><span>(</span><span>)</span><span>;</span>
chuizi<span>.</span><span>game</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><div><pre><code><span>// ES6中class类继承</span>
<span>class</span> <span>Phone</span><span>{</span>
	<span>constructor</span><span>(</span><span>brand<span>,</span>price</span><span>)</span> <span>{</span>
		<span>this</span><span>.</span>brand <span>=</span> brand<span>;</span>
		<span>this</span><span>.</span>price <span>=</span> price<span>;</span>
	<span>}</span>
	<span>call</span><span>(</span><span>)</span><span>{</span>
		console<span>.</span><span>log</span><span>(</span><span>"我可以打电话！"</span><span>)</span><span>;</span>
	<span>}</span>
<span>}</span>

<span>class</span> <span>SmartPhone</span> <span>extends</span> <span>Phone</span><span>{</span>
<span>// 构造函数</span>
	<span>constructor</span><span>(</span><span>brand<span>,</span>price<span>,</span>color<span>,</span>size</span><span>)</span> <span>{</span>
		<span>super</span><span>(</span>brand<span>,</span>price<span>)</span><span>;</span> <span>// 调用父类构造函数</span>
		<span>this</span><span>.</span>color <span>=</span> color<span>;</span>
		<span>this</span><span>.</span>size <span>=</span> size<span>;</span>
	<span>}</span>
	<span>// 子类对父类方法重写</span>
	<span>// 直接写，直接覆盖</span>
	<span>// 注意：子类无法调用父类同名方法</span>
	<span>call</span><span>(</span><span>)</span><span>{</span>
		console<span>.</span><span>log</span><span>(</span><span>"我可以进行视频通话！"</span><span>)</span><span>;</span>
	<span>}</span>
	<span>photo</span><span>(</span><span>)</span><span>{</span>
		console<span>.</span><span>log</span><span>(</span><span>"我可以拍照！"</span><span>)</span><span>;</span>
	<span>}</span>
	<span>game</span><span>(</span><span>)</span><span>{</span>
		console<span>.</span><span>log</span><span>(</span><span>"我可以玩游戏！"</span><span>)</span><span>;</span>
	<span>}</span>
<span>}</span>
<span>const</span> xiaomi <span>=</span> <span>new</span> <span>SmartPhone</span><span>(</span><span>"小米6"</span><span>,</span><span>1999</span><span>,</span><span>"黑色"</span><span>,</span><span>"5.15inch"</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>xiaomi<span>)</span><span>;</span>
<span>xiaomi</span><span>.</span><span>call</span><span>(</span><span>)</span><span>// 我可以进行视频通话！</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br></div></div><h3 id="class中的getter和setter设置"> class中的getter和setter设置</h3>
<div><pre><code><span>class</span> <span>Phone</span><span>{</span>
	<span>get</span> <span>price</span><span>(</span><span>)</span><span>{</span>
		console<span>.</span><span>log</span><span>(</span><span>"价格属性被读取了！"</span><span>)</span><span>;</span>
		<span>// 返回值</span>
		<span>return</span> <span>123</span><span>;</span>
	<span>}</span>
	<span>set</span> <span>price</span><span>(</span><span>value</span><span>)</span><span>{</span>
		console<span>.</span><span>log</span><span>(</span><span>"价格属性被修改了！"</span><span>)</span><span>;</span>
	<span>}</span>
<span>}</span>
<span>// 实例化对象</span>
<span>let</span> s <span>=</span> <span>new</span> <span>Phone</span><span>(</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>s<span>.</span>price<span>)</span><span>;</span> <span>// 返回值</span>
s<span>.</span>price <span>=</span> <span>2999</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h2 id="es6-模块化"> ES6 模块化</h2>
<p>模块化是指将一个大的程序文件，拆分成许多小的文件，然后将小文件组合起来。</p>
<p><strong>模块化的好处</strong>：</p>
<ul>
<li>防止命名冲突</li>
<li>代码复用</li>
<li>高维护性</li>
</ul>
<p><strong>模块化规范产品</strong>：</p>
<ul>
<li>CommonJS =&gt; NodeJS、Browserify</li>
<li>AMD =&gt; requireJS</li>
<li>CMD =&gt; seaJS</li>
</ul>
<p><strong>模块功能主要由两个命令构成：export 和 import</strong></p>
<ul>
<li><code>export</code> 命令用于规定模块的对外接口（导出模块）</li>
<li><code>import</code> 命令用于输入其他模块提供的功能（导入模块）</li>
</ul>
<p><img src="https://s2.loli.net/2022/02/03/QPWimT2Z1eGVDkz.png" alt="image-20220203213515987" loading="lazy"></p>
<h3 id="export"> export</h3>
<div><pre><code><span>// m1.js</span>
<span>// 逐个导出</span>
<span>export</span> <span>let</span> name <span>=</span> <span>"张三"</span><span>;</span>
<span>export</span> <span>function</span> <span>hello</span><span>(</span><span>)</span><span>{</span>
	console<span>.</span><span>log</span><span>(</span><span>"我叫张三"</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><div><pre><code><span>// m2.js</span>
<span>// 统一导出</span>
<span>let</span> name <span>=</span> <span>"李四"</span><span>;</span>
<span>function</span> <span>say</span><span>(</span><span>)</span><span>{</span>
		console<span>.</span><span>log</span><span>(</span><span>"我不叫李四"</span><span>)</span><span>;</span>
<span>}</span>
<span>export</span> <span>{</span>
	name<span>,</span>
  say
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><div><pre><code><span>// m3.js</span>
<span>// 默认导出，注意：只允许使用一次</span>
<span>export</span> <span>default</span><span>{</span>
	<span>age</span> <span>:</span> <span>18</span><span>,</span>
	<span>sing</span> <span>:</span> <span>function</span><span>(</span><span>)</span><span>{</span>
		console<span>.</span><span>log</span><span>(</span><span>"我会唱歌"</span><span>)</span><span>;</span>
	<span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id="import"> import</h3>
<div><pre><code><span>// 通用导入（*）</span>

<span>import</span> <span>*</span> <span>as</span> m1 <span>from</span> <span>"./js/m1.js"</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>m1<span>.</span>name<span>)</span>
m1<span>.</span><span>hello</span><span>(</span><span>)</span>

<span>import</span> <span>*</span> <span>as</span> m2 <span>from</span> <span>"./js/m2.js"</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>m2<span>.</span>name<span>)</span>
m2<span>.</span><span>say</span><span>(</span><span>)</span>

<span>//注意这里调用方法的时候需要加上default</span>
<span>import</span> <span>*</span> <span>as</span> m3 <span>from</span> <span>"./js/m3.js"</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>m3<span>.</span>default<span>.</span>age<span>)</span>
m3<span>.</span>default<span>.</span><span>sing</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><div><pre><code><span>// 解构赋值形式，按需导入</span>

<span>import</span> <span>{</span>name<span>,</span>hello<span>}</span> <span>from</span> <span>"./js/m1.js"</span><span>;</span>
<span>hello</span><span>(</span><span>)</span>

<span>// 重名的可以使用别名</span>
<span>import</span> <span>{</span>name <span>as</span> nickname<span>,</span>say<span>}</span> <span>from</span> <span>"./js/m2.js"</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>nickname<span>)</span>

<span>// 导入默认导出的模块，必须使用别名</span>
<span>import</span> <span>{</span><span>default</span> <span>as</span> m3<span>}</span> <span>from</span> <span>"./js/m3.js"</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>m3<span>.</span>age<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><div><pre><code><span>// 默认导出</span>
<span>import</span> m3 <span>from</span> <span>"./js/m3.js"</span><span>;</span>
m3<span>.</span><span>sing</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><strong>特殊情况</strong>：不需要导入数据，只需执行代码</p>
<div><pre><code><span>// m4.js</span>
<span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>5</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span>i<span>)</span><span>;</span>
<span>}</span>

<span>// ---------------------------------------</span>
<span>// demo.js</span>
<span>import</span> <span>"./js/m4.js"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><blockquote>
<p><strong>提示</strong>：在<code>html</code>文件使用ES6模块化要加入<code>type=&quot;module&quot;</code>，示例：<code>&lt;script type=&quot;module&quot;&gt;&lt;/script&gt;</code>。在<code>node.js</code>环境下，需在<code>package.json</code>加<code>&quot;type&quot;: &quot;module&quot;</code>(默认是commonJs)，node的版本也要在<code>v14.15.1</code>以上。</p>
</blockquote>
<h2 id="数值扩展"> 数值扩展</h2>
<h3 id="number-epsilon"> Number.EPSILON</h3>
<ul>
<li>Number.EPSILON 是 JavaScript 表示的最小精度</li>
<li>EPSILON 属性的值接近于 <code>2.2204460492503130808472633361816E-16</code></li>
</ul>
<h3 id="二进制、八进制和十六进制"> 二进制、八进制和十六进制</h3>
<ul>
<li>ES6 提供了二进制、八进制和十六进制数值的新的写法，分别用前缀<code>0b</code> 和 <code>0o</code>和<code>0x</code>表示</li>
</ul>
<h3 id="number-isfinite-与-number-isnan"> Number.isFinite() 与 Number.isNaN()</h3>
<ul>
<li>Number.isFinite() 用来检查一个数值是否为有限的</li>
<li>Number.isNaN() 用来检查一个值是否为 NaN</li>
</ul>
<h3 id="number-parseint-与-number-parsefloat"> Number.parseInt() 与 Number.parseFloat()</h3>
<ul>
<li>ES6 将全局方法 parseInt 和 parseFloat，移植到 Number 对象上面，使用不变</li>
</ul>
<h3 id="math-trunc"> Math.trunc</h3>
<ul>
<li>用于去除一个数的小数部分，返回整数部分</li>
</ul>
<h3 id="number-isinteger"> Number.isInteger</h3>
<ul>
<li>Number.isInteger() 用来判断一个数值是否为整数</li>
</ul>
<h3 id="math-sign"> Math.sign</h3>
<ul>
<li>判断一个数到底为正数 负数 还是零，返回<code>1</code>,<code>0</code>,<code>-1</code></li>
</ul>
<p><strong>相关代码实现</strong>：</p>
<div><pre><code><span>// Number.EPSILON</span>
<span>let</span> <span>equal</span> <span>=</span> <span>(</span><span>a<span>,</span> b</span><span>)</span> <span>=></span> Math<span>.</span><span>abs</span><span>(</span>a<span>-</span>b<span>)</span> <span>&lt;</span> Number<span>.</span><span>EPSILON</span><span>;</span>
console<span>.</span><span>log</span><span>(</span><span>0.1</span> <span>+</span> <span>0.2</span><span>)</span><span>;</span><span>// 0.30000000000000004</span>
console<span>.</span><span>log</span><span>(</span><span>0.1</span> <span>+</span> <span>0.2</span> <span>===</span> <span>0.3</span><span>)</span><span>;</span> <span>// false</span>
console<span>.</span><span>log</span><span>(</span><span>equal</span><span>(</span><span>0.1</span> <span>+</span> <span>0.2</span><span>,</span> <span>0.3</span><span>)</span><span>)</span><span>;</span> <span>// true</span>

<span>// 声明二进制、八进制和十六进制</span>
<span>let</span> b <span>=</span> <span>0b1010</span><span>;</span>
<span>let</span> o <span>=</span> <span>0o777</span><span>;</span>
<span>let</span> d <span>=</span> <span>100</span><span>;</span>
<span>let</span> x <span>=</span> <span>0xff</span><span>;</span>

<span>//Number.isFinite</span>
console<span>.</span><span>log</span><span>(</span>Number<span>.</span><span>isFinite</span><span>(</span><span>100</span><span>)</span><span>)</span><span>;</span> <span>//false</span>
console<span>.</span><span>log</span><span>(</span>Number<span>.</span><span>isFinite</span><span>(</span><span>100</span><span>/</span><span>0</span><span>)</span><span>)</span><span>;</span><span>// true</span>

<span>//Number.isNaN</span>
console<span>.</span><span>log</span><span>(</span>Number<span>.</span><span>isNaN</span><span>(</span><span>123</span><span>)</span><span>)</span><span>;</span><span>// false</span>

<span>//Number.parseInt Number.parseFloat字符串转整数</span>
console<span>.</span><span>log</span><span>(</span>Number<span>.</span><span>parseInt</span><span>(</span><span>"521iloveyou"</span><span>)</span><span>)</span><span>;</span> <span>//521</span>

<span>// Number.isInteger </span>
console<span>.</span><span>log</span><span>(</span>Number<span>.</span><span>isInteger</span><span>(</span><span>5</span><span>)</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>Number<span>.</span><span>isInteger</span><span>(</span><span>2.5</span><span>)</span><span>)</span><span>;</span>

<span>//Math.trunc 将数字的小数部分抹掉</span>
console<span>.</span><span>log</span><span>(</span>Math<span>.</span><span>trunc</span><span>(</span><span>3.5</span><span>)</span><span>)</span><span>;</span><span>//3</span>

<span>// Math.sign</span>
console<span>.</span><span>log</span><span>(</span>Math<span>.</span><span>sign</span><span>(</span><span>100</span><span>)</span><span>)</span><span>;</span><span>// 1</span>
console<span>.</span><span>log</span><span>(</span>Math<span>.</span><span>sign</span><span>(</span><span>0</span><span>)</span><span>)</span><span>;</span><span>// 0</span>
console<span>.</span><span>log</span><span>(</span>Math<span>.</span><span>sign</span><span>(</span><span>-</span><span>100</span><span>)</span><span>)</span><span>;</span><span>//-1</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><h2 id="对象扩展"> 对象扩展</h2>
<p>ES6 新增了一些 Object 对象的方法，常用的有：</p>
<ul>
<li><code>Object.is</code> 比较两个值是否严格相等，与『===』行为基本一致（+0 与 NaN）</li>
<li><code>Object.assign</code> 对象的合并，将源对象的所有可枚举属性，复制到目标对象</li>
<li><code>Object.setPrototypeOf</code>、 <code>Object.getPrototypeOf</code> 可以直接设置对象的原型</li>
</ul>
<p><strong>代码演示</strong>：</p>
<div><pre><code><span>// Object.is</span>
console<span>.</span><span>log</span><span>(</span>Object<span>.</span><span>is</span><span>(</span><span>120</span><span>,</span><span>120</span><span>)</span><span>)</span><span>;</span> <span>//true</span>

<span>//NaN与任何数值做===比较都是false，跟他自己也如此</span>
console<span>.</span><span>log</span><span>(</span>Object<span>.</span><span>is</span><span>(</span><span>NaN</span><span>,</span><span>NaN</span><span>)</span><span>)</span><span>;</span><span>//true</span>
console<span>.</span><span>log</span><span>(</span><span>NaN</span> <span>===</span> <span>NaN</span><span>)</span><span>;</span><span>//false</span>

<span>// Object.assign</span>
<span>const</span> config1 <span>=</span> <span>{</span>
	<span>host</span> <span>:</span> <span>"localhost"</span><span>,</span>
	<span>port</span> <span>:</span> <span>3306</span><span>,</span>
	<span>name</span> <span>:</span> <span>"root"</span><span>,</span>
	<span>pass</span> <span>:</span> <span>"root"</span><span>,</span>
	<span>test</span> <span>:</span> <span>"test"</span> <span>// 唯一存在</span>
<span>}</span>
<span>const</span> config2 <span>=</span> <span>{</span>
	<span>host</span> <span>:</span> <span>"http://xiaodye.com"</span><span>,</span>
	<span>port</span> <span>:</span> <span>6033</span><span>,</span>
	<span>name</span> <span>:</span> <span>"xiaodye"</span><span>,</span>
	<span>pass</span> <span>:</span> <span>"123456"</span><span>,</span>
<span>}</span>
<span>// 如果前边有后边没有会添加，如果前后都有，后面的会覆盖前面的</span>
console<span>.</span><span>log</span><span>(</span>Object<span>.</span><span>assign</span><span>(</span>config1<span>,</span>config2<span>)</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>config1 <span>===</span> Object<span>.</span><span>assign</span><span>(</span>config1<span>,</span>config2<span>)</span><span>)</span><span>;</span><span>//true</span>

<span>//  __proto__、setPrototypeOf、 getPrototypeOf</span>
<span>const</span> school <span>=</span> <span>{</span>
	<span>name</span> <span>:</span> <span>"尚硅谷"</span>
<span>}</span>
<span>const</span> cities <span>=</span> <span>{</span>
	<span>xiaoqu</span> <span>:</span> <span>[</span><span>'北京'</span><span>,</span><span>'上海'</span><span>,</span><span>'深圳'</span><span>]</span>
<span>}</span>
<span>// 并不建议这么做</span>
Object<span>.</span><span>setPrototypeOf</span><span>(</span>school<span>,</span>cities<span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>Object<span>.</span><span>getPrototypeOf</span><span>(</span>school<span>)</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>school<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br></div></div><h2 id="es7-新特性"> ES7 新特性</h2>
<ul>
<li>
<p>Array.prototype.includes</p>
<ul>
<li>includes 方法用来检测数组中是否包含某个元素，返回<code>布尔</code>类型值</li>
</ul>
</li>
<li>
<p>指数操作符</p>
<ul>
<li>在 ES7 中引入指数运算符「**」，用来实现幂运算，功能与 <code>Math.pow</code>结果相同</li>
<li>幂运算的简化写法，例如：2的10次方：<code>2**10</code></li>
</ul>
</li>
</ul>
<p><strong>代码演示</strong>：</p>
<div><pre><code><span>// includes</span>
<span>let</span> arr <span>=</span> <span>[</span><span>1</span><span>,</span><span>2</span><span>,</span><span>3</span><span>,</span><span>4</span><span>]</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>arr<span>.</span><span>includes</span><span>(</span><span>1</span><span>)</span><span>)</span><span>;</span><span>// true</span>

<span>// 指数操作符</span>
console<span>.</span><span>log</span><span>(</span>Math<span>.</span><span>pow</span><span>(</span><span>2</span><span>,</span><span>10</span><span>)</span><span>)</span><span>// 1024</span>
console<span>.</span><span>log</span><span>(</span><span>2</span><span>**</span><span>10</span><span>)</span><span>;</span><span>// 1024</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="最后"> 最后</h2>
<p>❤️如果发现文章有错误，还请指出❤️</p>
]]></content:encoded>
      <enclosure url="https://s2.loli.net/2022/02/12/zHTKWbgyxQa8qfk.png" type="image/png"/>
    </item>
    <item>
      <title>组件禁用</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/guide/disable/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/guide/disable/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/rss.xml">组件禁用</source>
      <description>&amp;lt;p&amp;gt;你可以通过设置页面的 Frontmatter，在页面禁用一些功能。&amp;lt;/p&amp;gt;
</description>
      <category>使用指南</category>
      <pubDate>Fri, 28 Jan 2022 12:41:51 GMT</pubDate>
      <content:encoded><![CDATA[<p>你可以通过设置页面的 Frontmatter，在页面禁用一些功能。</p>

<p>本页面应当禁用了:</p>
<ul>
<li>导航栏</li>
<li>侧边栏</li>
<li>路径导航</li>
<li>页面信息</li>
<li>贡献者</li>
<li>编辑此页链接</li>
<li>更新时间</li>
<li>上一篇/下一篇 链接</li>
<li>评论</li>
<li>页脚</li>
<li>返回顶部按钮</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>主要功能与配置演示</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/guide/config/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/guide/config/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/rss.xml">主要功能与配置演示</source>
      <category>使用指南</category>
      <pubDate>Fri, 28 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="主要功能与配置演示"> 主要功能与配置演示</h1>
<ul>
<li>
<p><a href="./page.html">页面展示</a></p>
</li>
<li>
<p><a href="./markdown.html">Markdown 展示</a></p>
</li>
<li>
<p><a href="./disable.html">禁用展示</a></p>
</li>
<li>
<p><a href="./encrypt.html">加密展示</a></p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>从简到难，重新学习ES6（下）</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/es6/%E4%BB%8E%E7%AE%80%E5%88%B0%E9%9A%BE%EF%BC%8C%E9%87%8D%E6%96%B0%E5%AD%A6%E4%B9%A0ES6%EF%BC%88%E4%B8%8B%EF%BC%89/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/es6/%E4%BB%8E%E7%AE%80%E5%88%B0%E9%9A%BE%EF%BC%8C%E9%87%8D%E6%96%B0%E5%AD%A6%E4%B9%A0ES6%EF%BC%88%E4%B8%8B%EF%BC%89/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/rss.xml">从简到难，重新学习ES6（下）</source>
      <category>ES6</category>
      <pubDate>Mon, 14 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="开始"> 开始</h2>
<p>快速入门ES6的最后一篇，也是最难的部分。</p>
<p><img src="https://s2.loli.net/2022/02/14/HvGmWceuJUVjFdN.png" alt="ES6(下)" loading="lazy"></p>
<h2 id="symbol"> Symbol</h2>
<p>ES6 引入了一种新的原始数据类型 <code>Symbol</code>，表示独一无二的值。它是 JavaScript 语言的<code>第七种数据类型</code>，是一种类似于字符串的数据类型。回顾一下，JavaScript有<code>number</code>,<code>string</code>,<code>boolean</code>,<code>null</code>,<code>undefined</code>,<code>object</code>六种数据类型，加上<code>symbol</code>就是七种基本数据类型。</p>
<p>它有以下特点：</p>
<ul>
<li>Symbol 的值是唯一的，用来解决命名冲突的问题</li>
<li>Symbol 值不能与其他数据进行运算</li>
<li>Symbol 定义 的 对象属 性 不能 使 用 for…in /of循 环遍 历 ，但 是可 以 使 用 <code>Reflect.ownKeys</code>或<code>Object.getOwnPropertySymbols</code> 来获取对象的所有键名</li>
</ul>
<h3 id="symbol的基本使用"> Symbol的基本使用</h3>
<p><code>Symbol</code>的创建</p>
<div><pre><code><span>let</span> s <span>=</span> <span>Symbol</span><span>(</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>s<span>)</span><span>;</span>
<span>let</span> s2 <span>=</span> <span>Symbol</span><span>(</span><span>"我是symbol类型"</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>s <span>===</span> s2<span>)</span><span>;</span><span>// false</span>
<span>let</span> s3 <span>=</span> <span>Symbol</span><span>(</span><span>"我是symbol类型"</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>s2<span>===</span>s3<span>)</span><span>// false</span>

<span>// Symbol.for()</span>
<span>// 也可以创建Symbol类型数据，这样的话，就方便我们通过描述（标识）区分开不同的Symbol了</span>
<span>let</span> s4 <span>=</span> Symbol<span>.</span><span>for</span><span>(</span><span>"sym"</span><span>)</span><span>;</span>
<span>let</span> s5 <span>=</span> Symbol<span>.</span><span>for</span><span>(</span><span>"sym"</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>s4 <span>===</span> s5<span>)</span><span>;</span> <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>不能参与运算</p>
<div><pre><code><span>let</span> s <span>=</span> <span>Symbol</span><span>(</span><span>)</span>
<span>let</span> res <span>=</span> s <span>+</span> <span>100</span><span>// 报错</span>
res <span>=</span> s <span>></span> <span>200</span><span>// 报错</span>
res <span>=</span> s <span>+</span> <span>"symbol"</span><span>// 报错</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>获得<code>symbol</code>属性</p>
<div><pre><code><span>let</span> sy <span>=</span> <span>Symbol</span><span>(</span><span>)</span><span>;</span>
<span>const</span> user <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>"张三"</span><span>,</span>
  <span>age</span><span>:</span> <span>18</span><span>,</span>
<span>}</span><span>;</span>
user<span>[</span>sy<span>]</span> <span>=</span> <span>"symbol"</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>user<span>)</span><span>;</span>

<span>for</span> <span>(</span><span>let</span> key <span>in</span> user<span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span>key<span>)</span><span>;</span><span>// name,age</span>
<span>}</span>

console<span>.</span><span>log</span><span>(</span>Object<span>.</span><span>getOwnPropertySymbols</span><span>(</span>user<span>)</span><span>)</span><span>;</span><span>// [Symbol()]</span>
console<span>.</span><span>log</span><span>(</span>Reflect<span>.</span><span>ownKeys</span><span>(</span>user<span>)</span><span>)</span><span>;</span><span>// ['name', 'age', Symbol()]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p><code>Symbol</code>的值是唯一的，我们可以往对象添加属性，解决命名冲突的问题</p>
<div><pre><code><span>let</span> game <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>"魂斗罗"</span><span>,</span>
  <span>up</span><span>:</span> <span>function</span> <span>(</span><span>)</span> <span>{</span><span>}</span><span>,</span>
  <span>down</span><span>:</span> <span>function</span> <span>(</span><span>)</span> <span>{</span><span>}</span><span>,</span>
  <span>//方式一</span>
   <span>[</span><span>Symbol</span><span>(</span><span>"手雷"</span><span>)</span><span>]</span><span>:</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
     console<span>.</span><span>log</span><span>(</span><span>"扔手雷"</span><span>)</span><span>;</span>
   <span>}</span><span>,</span>
<span>}</span><span>;</span>

<span>let</span> methods <span>=</span> <span>{</span>
  <span>up</span><span>:</span> <span>Symbol</span><span>(</span><span>)</span><span>,</span>
  <span>down</span><span>:</span> <span>Symbol</span><span>(</span><span>)</span><span>,</span>
<span>}</span><span>;</span>

<span>// 方式二</span>
game<span>[</span>methods<span>.</span>up<span>]</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>"我会跳"</span><span>)</span><span>;</span>
<span>}</span><span>;</span>
game<span>[</span>methods<span>.</span>down<span>]</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>"我会蹲"</span><span>)</span><span>;</span>
<span>}</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>game<span>)</span><span>;</span>
game<span>[</span>methods<span>.</span>up<span>]</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><p><img src="https://s2.loli.net/2022/02/10/y9qtmiQGe3EWPnU.png" alt="image-20220210110711971" loading="lazy"></p>
<h3 id="symbol内置值"> Symbol内置值</h3>
<p>除了定义自己使用的 Symbol 值以外，ES6 还提供了 <code>11</code> 个内置的 Symbol 值，指向语言内部使用的方 法。可以称这些方法为魔术方法，因为它们会在特定的场景下自动执行。<strong>特别的</strong>， Symbol内置值的使用，都是作为某个对象类型的属性去使用。</p>
<table>
<thead>
<tr>
<th>内置Symbol的值</th>
<th>调用时机</th>
</tr>
</thead>
<tbody>
<tr>
<td>Symbol.hasInstance</td>
<td>当其他对象使用 instanceof 运算符，判断是否为该对象的实例时，会调用这个方法</td>
</tr>
<tr>
<td>Symbol.isConcatSpreadable</td>
<td>对象的 Symbol.isConcatSpreadable 属性等于的是一个 布尔值，表示该对象用于 Array.prototype.concat()时， 是否可以展开。</td>
</tr>
<tr>
<td>Symbol.species</td>
<td>创建衍生对象时，会使用该属性</td>
</tr>
<tr>
<td>Symbol.match</td>
<td>当执行 str.match(myObject) 时，如果该属性存在，会 调用它，返回该方法的返回值。</td>
</tr>
<tr>
<td>Symbol.replace</td>
<td>当该对象被 str.replace(myObject)方法调用时，会返回 该方法的返回值。</td>
</tr>
<tr>
<td>Symbol.search</td>
<td>当该对象被 str.search (myObject)方法调用时，会返回 该方法的返回值。</td>
</tr>
<tr>
<td>Symbol.split</td>
<td>当该对象被 str.split(myObject)方法调用时，会返回该 方法的返回值。</td>
</tr>
<tr>
<td>Symbol.iterator</td>
<td>对象进行 for...of 循环时，会调用 Symbol.iterator 方法， 返回该对象的默认遍历器</td>
</tr>
<tr>
<td>Symbol.toPrimitive</td>
<td>该对象被转为原始类型的值时，会调用这个方法，返 回该对象对应的原始类型值。</td>
</tr>
<tr>
<td>Symbol. toStringTag</td>
<td>在该对象上面调用 toString 方法时，返回该方法的返 回值</td>
</tr>
<tr>
<td>Symbol. unscopables</td>
<td>该对象指定了使用 with 关键字时，哪些属性会被 with 环境排除。</td>
</tr>
</tbody>
</table>
<div><pre><code><span>// 检测类型</span>
<span>class</span> <span>Person</span><span>{</span>
	<span>static</span> <span>[</span>Symbol<span>.</span>hasInstance<span>]</span><span>(</span><span>param</span><span>)</span><span>{</span>
		console<span>.</span><span>log</span><span>(</span>param<span>)</span><span>;</span>
		console<span>.</span><span>log</span><span>(</span><span>"我检测类型了"</span><span>)</span><span>;</span>
		<span>return</span> <span>false</span><span>;</span>
	<span>}</span>
<span>}</span>
<span>let</span> o <span>=</span> <span>{</span><span>}</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>o <span>instanceof</span> <span>Person</span><span>)</span><span>;</span>

<span>// 合并数组：false数组不可展开，true可展开</span>
<span>const</span> arr <span>=</span> <span>[</span><span>1</span><span>,</span><span>2</span><span>,</span><span>3</span><span>]</span><span>;</span>
<span>const</span> arr2 <span>=</span> <span>[</span><span>4</span><span>,</span><span>5</span><span>,</span><span>6</span><span>]</span><span>;</span>
arr2<span>[</span>Symbol<span>.</span>isConcatSpreadable<span>]</span> <span>=</span> <span>false</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>arr<span>.</span><span>concat</span><span>(</span>arr2<span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p><img src="https://s2.loli.net/2022/02/10/eUr2Sm7lHENTxIA.png" alt="image-20220210112129561" loading="lazy"></p>
<h2 id="迭代器-iterator"> 迭代器(Iterator)</h2>
<p>迭代器（Iterator）就是一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数 据结构只要部署 Iterator 接口，就可以完成遍历操作。ES6 创造了一种新的遍历命令 <code>for...of</code> 循环，Iterator 接口主要供 for...of 消费。</p>
<p><strong>原生具备 iterator 接口的数据(可用 for of 遍历)</strong>：</p>
<ul>
<li>
<p>Array</p>
</li>
<li>
<p>Arguments</p>
</li>
<li>
<p>Set</p>
</li>
<li>
<p>Map</p>
</li>
<li>
<p>String</p>
</li>
<li>
<p>TypedArray</p>
</li>
<li>
<p>NodeList</p>
</li>
</ul>
<p><strong>工作原理</strong>：</p>
<ol>
<li>创建一个指针对象，指向当前数据结构的起始位置</li>
<li>第一次调用对象的 next 方法，指针自动指向数据结构的第一个成员</li>
<li>接下来不断调用 next 方法，指针一直往后移动，直到指向最后一个成员</li>
<li>每调用 next 方法返回一个包含 <code>value</code>和 <code>done</code>属性的对象</li>
</ol>
<blockquote>
<p><strong>什么时候用</strong>：需要自定义遍历数据的时候，要想到迭代器</p>
</blockquote>
<div><pre><code><span>const</span> arr <span>=</span> <span>[</span><span>"red"</span><span>,</span> <span>"green"</span><span>,</span> <span>"blue"</span><span>,</span><span>"yellow"</span><span>]</span>

<span>// 使用 for...of 遍历数组</span>
<span>for</span><span>(</span><span>let</span> v <span>of</span> arr<span>)</span><span>{</span>
  console<span>.</span><span>log</span><span>(</span>v<span>)</span>
<span>}</span>

<span>let</span> iterator <span>=</span> arr<span>[</span>Symbol<span>.</span>iterator<span>]</span><span>(</span><span>)</span>

<span>// 调用对象的next方法</span>
console<span>.</span><span>log</span><span>(</span>iterator<span>.</span><span>next</span><span>(</span><span>)</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>iterator<span>.</span><span>next</span><span>(</span><span>)</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>iterator<span>.</span><span>next</span><span>(</span><span>)</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>iterator<span>.</span><span>next</span><span>(</span><span>)</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>iterator<span>.</span><span>next</span><span>(</span><span>)</span><span>)</span>

<span>// 重新初始化对象，指针也会重新回到最前面</span>
<span>let</span> iterator1 <span>=</span> arr<span>[</span>Symbol<span>.</span>iterator<span>]</span><span>(</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>iterator1<span>.</span><span>next</span><span>(</span><span>)</span><span>)</span><span>;</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p><img src="https://s2.loli.net/2022/02/10/i1XmrFDqvpoj9M3.png" alt="image-20220210113908698" loading="lazy"></p>
<p><strong>迭代器自定义遍历对象</strong>：</p>
<div><pre><code><span>const</span> nb <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>"清北班"</span><span>,</span>
  <span>stu</span><span>:</span> <span>[</span><span>"张三"</span><span>,</span> <span>"李四"</span><span>,</span> <span>"王五"</span><span>]</span><span>,</span>
  <span>[</span>Symbol<span>.</span>iterator<span>]</span><span>(</span><span>)</span> <span>{</span>
    <span>let</span> index <span>=</span> <span>0</span><span>;</span>
    <span>return</span> <span>{</span>
      <span>next</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
        <span>if</span> <span>(</span>index <span>&lt;</span> <span>this</span><span>.</span>stu<span>.</span>length<span>)</span> <span>{</span>
          <span>return</span> <span>{</span> <span>value</span><span>:</span> <span>this</span><span>.</span>stu<span>[</span>index<span>++</span><span>]</span><span>,</span> <span>done</span><span>:</span> <span>false</span> <span>}</span><span>;</span>
        <span>}</span> <span>else</span> <span>{</span>
          <span>return</span> <span>{</span> <span>value</span><span>:</span> <span>undefined</span><span>,</span> <span>done</span><span>:</span> <span>true</span> <span>}</span><span>;</span>
        <span>}</span>
      <span>}</span><span>,</span>
    <span>}</span><span>;</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>

<span>for</span> <span>(</span><span>let</span> v <span>of</span> nb<span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span>v<span>)</span><span>;</span><span>// 张三 李四 王五</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h2 id="生成器-generator"> 生成器(Generator)</h2>
<p>生成器<code>Generator</code>函数是 ES6 提供的一种<code>异步编程</code>解决方案，语法行为与传统函数完全不同。</p>
<p><strong>注意点</strong>：</p>
<ul>
<li>函数的声明带一个<code>*</code>号</li>
<li>函数不能直接执行，用<code>yield</code>分割执行区域，<code>next()</code>依次执行，每次返回一个对象</li>
<li><code>next()</code>方法是可以传入参数的，传入的参数作为上一条<code>yield</code>的返回结果</li>
</ul>
<p>观察下面的执行：</p>
<div><pre><code><span>function</span><span>*</span> <span>gen</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>1</span><span>)</span><span>;</span>
  <span>yield</span> <span>"代码片1"</span><span>;</span>
  console<span>.</span><span>log</span><span>(</span><span>2</span><span>)</span><span>;</span>
  <span>yield</span> <span>"代码片2"</span><span>;</span>
  console<span>.</span><span>log</span><span>(</span><span>3</span><span>)</span><span>;</span>
  <span>yield</span> <span>"代码片3"</span><span>;</span>
  console<span>.</span><span>log</span><span>(</span><span>4</span><span>)</span><span>;</span>
<span>}</span>

<span>let</span> iterator <span>=</span> <span>gen</span><span>(</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>iterator<span>.</span><span>next</span><span>(</span><span>)</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>iterator<span>.</span><span>next</span><span>(</span><span>)</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>iterator<span>.</span><span>next</span><span>(</span><span>)</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>iterator<span>.</span><span>next</span><span>(</span><span>)</span><span>)</span><span>;</span>

<span>for</span> <span>(</span><span>let</span> v <span>of</span> <span>gen</span><span>(</span><span>)</span><span>)</span> <span>{</span>
	console<span>.</span><span>log</span><span>(</span>v<span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p><img src="https://s2.loli.net/2022/02/10/xA43mudqeW5Zzcw.png" alt="image-20220210120720114" loading="lazy"></p>
<p>生成器函数的参数传递：</p>
<div><pre><code><span>function</span><span>*</span> <span>gen</span><span>(</span><span>arg</span><span>)</span><span>{</span>
	console<span>.</span><span>log</span><span>(</span>arg<span>)</span><span>;</span>
	<span>let</span> one <span>=</span> <span>yield</span> <span>1</span><span>;</span>
	console<span>.</span><span>log</span><span>(</span>one<span>)</span><span>;</span>
	<span>let</span> two <span>=</span> <span>yield</span> <span>2</span><span>;</span>
	console<span>.</span><span>log</span><span>(</span>two<span>)</span><span>;</span>
	<span>let</span> three <span>=</span> <span>yield</span> <span>3</span><span>;</span>
	console<span>.</span><span>log</span><span>(</span>three<span>)</span><span>;</span>
<span>}</span>
<span>let</span> iterator <span>=</span> <span>gen</span><span>(</span><span>"A"</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>iterator<span>.</span><span>next</span><span>(</span><span>)</span><span>)</span><span>;</span> <span>// 会执行yield 1;</span>

<span>// next()方法是可以传入参数的，传入的参数作为第一条yield的返回结果</span>
console<span>.</span><span>log</span><span>(</span>iterator<span>.</span><span>next</span><span>(</span><span>"B"</span><span>)</span><span>)</span><span>;</span> <span>// 会执行yield 2;</span>
console<span>.</span><span>log</span><span>(</span>iterator<span>.</span><span>next</span><span>(</span><span>"C"</span><span>)</span><span>)</span><span>;</span> <span>// 会执行yield 3;</span>
console<span>.</span><span>log</span><span>(</span>iterator<span>.</span><span>next</span><span>(</span><span>"D"</span><span>)</span><span>)</span><span>;</span> <span>// 继续往后走，未定义;</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p><img src="https://s2.loli.net/2022/02/14/9apUKTJP6IH2xzo.png" alt="image-20220214113353527" loading="lazy"></p>
<p><strong>生成器实例</strong>：异步获取用户数据</p>
<div><pre><code><span>// 模拟获取: 用户数据 订单数据 商品数据</span>

<span>function</span> <span>getUsers</span><span>(</span><span>)</span><span>{</span>
	<span>setTimeout</span><span>(</span><span>(</span><span>)</span><span>=></span><span>{</span>
		<span>let</span> data <span>=</span> <span>"用户数据"</span><span>;</span>
		iterator<span>.</span><span>next</span><span>(</span>data<span>)</span><span>;</span> <span>// 这里将data传入</span>
	<span>}</span><span>,</span><span>1000</span><span>)</span><span>;</span>
<span>}</span>
<span>function</span> <span>getOrders</span><span>(</span><span>)</span><span>{</span>
	<span>setTimeout</span><span>(</span><span>(</span><span>)</span><span>=></span><span>{</span>
		<span>let</span> data <span>=</span> <span>"订单数据"</span><span>;</span>
		iterator<span>.</span><span>next</span><span>(</span>data<span>)</span><span>;</span> <span>// 这里将data传入</span>
	<span>}</span><span>,</span><span>1000</span><span>)</span><span>;</span>
<span>}</span>
<span>function</span> <span>getGoods</span><span>(</span><span>)</span><span>{</span>
	<span>setTimeout</span><span>(</span><span>(</span><span>)</span><span>=></span><span>{</span>
		<span>let</span> data <span>=</span> <span>"商品数据"</span><span>;</span>
		iterator<span>.</span><span>next</span><span>(</span>data<span>)</span><span>;</span> <span>// 这里将data传入</span>
	<span>}</span><span>,</span><span>1000</span><span>)</span><span>;</span>
<span>}</span>
<span>function</span><span>*</span> <span>gen</span><span>(</span><span>)</span><span>{</span>
	<span>let</span> users <span>=</span> <span>yield</span> <span>getUsers</span><span>(</span><span>)</span><span>;</span>
	console<span>.</span><span>log</span><span>(</span>users<span>)</span><span>;</span>
	<span>let</span> orders <span>=</span> <span>yield</span> <span>getOrders</span><span>(</span><span>)</span><span>;</span>
	console<span>.</span><span>log</span><span>(</span>orders<span>)</span><span>;</span>
	<span>let</span> goods <span>=</span> <span>yield</span> <span>getGoods</span><span>(</span><span>)</span><span>;</span>
	console<span>.</span><span>log</span><span>(</span>goods<span>)</span><span>;</span> 
<span>}</span>


<span>let</span> iterator <span>=</span> <span>gen</span><span>(</span><span>)</span><span>;</span>
iterator<span>.</span><span>next</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div><h2 id="promise"> Promise</h2>
<p>Promise 是 ES6 引入的异步编程的新解决方案。语法上 Promise 是一个构造函数，用来封装异步操作 并可以获取其成功或失败的结果。Promise在开发中用非常多，在面试中也是常考点，显得尤为重要。</p>
<p><strong>知识点</strong>：</p>
<ul>
<li>
<p>Promise是一个构造函数，并且一创建就会执行</p>
</li>
<li>
<p>Promise的三种状态：<code>pending</code>(等待态)，<code>fulfiled</code>(成功态)，<code>rejected</code>(失败态)</p>
</li>
<li>
<p>Promise接收一个参数：<code>函数</code>，并且这个函数需要传入两个参数<code>resolve</code>,<code>reject</code>,也是函数</p>
</li>
<li>
<p>Promise.prototype上的<code>.then()</code>：预先指定成功和失败的回调函数</p>
</li>
<li>
<p>Promise.prototype上的<code>.catch()</code>：捕获异步操作中的错误</p>
</li>
<li>
<p><code>Promise.finally()</code>、<code>Promise.all()</code>、<code>Promise.race()</code>等</p>
</li>
</ul>
<h3 id="回调地狱"> 回调地狱</h3>
<p>多层回调函数的相互嵌套，就形成了回调地狱，回调地狱造成代码<code>耦合性太强，难以维护</code>，<code>深嵌套，代码可读性差，不美观</code>。如示例代码：</p>
<div><pre><code><span>// 回调地狱</span>
<span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
  	console<span>.</span><span>log</span><span>(</span><span>"开始第一件事"</span><span>)</span>
  	<span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    		console<span>.</span><span>log</span><span>(</span><span>"开始第二件事"</span><span>)</span>
    		<span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
      			console<span>.</span><span>log</span><span>(</span><span>"开始第三件事"</span><span>)</span>
    		<span>}</span><span>,</span> <span>1000</span><span>)</span>
  	<span>}</span><span>,</span> <span>1000</span><span>)</span>
<span>}</span><span>,</span> <span>1000</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id="promise使用"> Promise使用</h3>
<p>我们再来看看用Promise写的</p>
<div><pre><code><span>const</span> p <span>=</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span>reject</span><span>)</span> <span>=></span> <span>{</span><span>// 初始化，状态置为`pending`(等待态)</span>
	<span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
		<span>let</span> data <span>=</span> <span>"数据"</span><span>;</span>
    <span>resolve</span><span>(</span>data<span>)</span><span>// 调用resolve，状态置为`fulfiled`(成功态)</span>
		
		<span>let</span> err <span>=</span> <span>"失败了！"</span><span>;</span>
    <span>//reject(err) // 调用reject，状态置为`rejected`(失败态)</span>

	<span>}</span><span>,</span><span>1000</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>

<span>// 调用 Promise 对象的then方法，两个参数都为函数，成功的回调必传，失败的回调可传可不传</span>
p<span>.</span><span>then</span><span>(</span><span>(</span><span>res</span><span>)</span> <span>=></span> <span>{</span> <span>// 成功回调</span>
	console<span>.</span><span>log</span><span>(</span>res<span>)</span><span>;</span><span>// 数据</span>
<span>}</span><span>,</span> <span>(</span><span>err</span><span>)</span> <span>=></span> <span>{</span> <span>// 失败回调</span>
	console<span>.</span><span>log</span><span>(</span>err<span>)</span><span>;</span><span>// 失败了</span>
<span>}</span><span>)</span><span>;</span>

p<span>.</span><span>catch</span><span>(</span><span>(</span><span>err</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>err<span>)</span><span>)</span><span>// 在catch中也能捕获错误</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p><strong>实践</strong>：用<code>Promise</code>封装异步读取多个文件(<code>node.js</code>环境下)</p>
<p><img src="https://s2.loli.net/2022/02/13/8LHowaYzm1ilDyF.png" alt="code" loading="lazy"></p>
<p>还有<code>Promise.finally()</code>和``Promise.all()<code>和</code>Promise.race()`，由于内容比较多，不好展开讲，可以去看一下<a href="https://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener noreferrer">阮一峰 - ES6 入门教程</a></p>
<h2 id="async和await"> async和await</h2>
<p>ES8引入了<code>async</code>和<code>await</code>，更近一步地简化了<code>Promise</code>异步操作，可以让异步代码看起来像同步代码一样，在开发中用的也比较多。</p>
<p><strong>注意点</strong>：</p>
<ul>
<li>如果使用了<code>await</code>，则函数必须被<code>async</code>所修饰，async函数的返回值为Promise对象</li>
<li>await右侧表达式一般为Promise对象</li>
</ul>
<p>演示下<code>async/await</code>简单使用：</p>
<div><pre><code><span>//</span>
<span>const</span> p1 <span>=</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
  <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>let</span> data <span>=</span> <span>"数据"</span>
    <span>resolve</span><span>(</span>data<span>)</span>
  <span>}</span><span>,</span> <span>2000</span><span>)</span>
<span>}</span><span>)</span>

<span>async</span> <span>function</span> <span>getData</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> res1 <span>=</span> <span>await</span> p1
  console<span>.</span><span>log</span><span>(</span>res1<span>)</span>
<span>}</span>

<span>getData</span><span>(</span><span>)</span>

p1<span>.</span><span>then</span><span>(</span><span>res2</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>res2<span>)</span><span>)</span> <span>// 执行后，可以发现res1的值和res2一样</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>说简单点，用<code>async</code>修饰后可以得到Promise对象的<strong>成功回调</strong>的值，不需要再用<code>.then()</code>链式调用，从而简化了Promise的异步操作。</p>
<p><img src="https://s2.loli.net/2022/02/13/E8PxDNqRZ67b2ct.png" alt="image-20220213215903014" loading="lazy"></p>
<h2 id="最后"> 最后</h2>
<p>感谢读完本篇文章，希望对你能有所帮助，如有问题欢迎各位指正❤️❤️。</p>
<p><strong>推荐文章</strong>：</p>
<p><a href="https://juejin.cn/post/7062956206955954184" target="_blank" rel="noopener noreferrer">从简到难，重新学习ES6（上）</a></p>
<p><a href="https://juejin.cn/post/7063688645600870431" target="_blank" rel="noopener noreferrer">从简到难，重新学习ES6（中）</a></p>
]]></content:encoded>
      <enclosure url="https://s2.loli.net/2022/02/14/HvGmWceuJUVjFdN.png" type="image/png"/>
    </item>
    <item>
      <title>Markdown 增强</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/guide/markdown/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/guide/markdown/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/rss.xml">Markdown 增强</source>
      <description>&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;vuepress-theme-hope&amp;lt;/code&amp;gt; 通过内置 &amp;lt;a href=&amp;quot;https://vuepress-theme-hope.github.io/md-enhance&amp;quot; target=&amp;quot;_blank&amp;quot; rel=&amp;quot;noopener noreferrer&amp;quot;&amp;gt;md-enhance&amp;lt;/a&amp;gt;，在 Markdown 中启用了更多的语法与新功能。&amp;lt;/p&amp;gt;
</description>
      <category>使用指南</category>
      <pubDate>Fri, 28 Jan 2022 12:41:51 GMT</pubDate>
      <content:encoded><![CDATA[<p><code>vuepress-theme-hope</code> 通过内置 <a href="https://vuepress-theme-hope.github.io/md-enhance" target="_blank" rel="noopener noreferrer">md-enhance</a>，在 Markdown 中启用了更多的语法与新功能。</p>

<h2 id="一键启用"> 一键启用</h2>
<p>你可以设置 <code>themeconfig.mdEnhance.enableAll</code> 启用 <a href="https://vuepress-theme-hope.github.io/md-enhance" target="_blank" rel="noopener noreferrer">md-enhance</a> 插件的所有功能。</p>
<div><div><br><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br><br></div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  <span>themeConfig</span><span>:</span> <span>{</span>
    <span>mdEnhance</span><span>:</span> <span>{</span>
      <span>enableAll</span><span>:</span> <span>true</span><span>,</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>
</code></pre><div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="新增的更多语法"> 新增的更多语法</h2>
<h3 id="上下角标"> 上下角标</h3>
<p>19<sup>th</sup> H<sub>2</sub>O</p>
<details><summary>代码</summary>
<div><pre><code>19^th^ H<span><span>~</span><span>2</span><span>~</span></span>O
</code></pre>
<div><span>1</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/sup-sub/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="自定义对齐"> 自定义对齐</h3>
<div>
<p>我是居中的</p>
</div>
<div>
<p>我在右对齐</p>
</div>
<details><summary>代码</summary>
<div><pre><code>::: center

我是居中的

:::

::: right

我在右对齐

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/align/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="脚注"> 脚注</h3>
<p>此文字有脚注<sup></sup>.</p>
<details><summary>代码</summary>
<div><pre><code>此文字有脚注[^first].

<span><span>[</span><span>^first</span><span>]</span><span>:</span> 这是脚注内容</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/footnote/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="标记"> 标记</h3>
<p>你可以标记 <mark>重要的内容</mark> 。</p>
<details><summary>代码</summary>
<div><pre><code>你可以标记 ==重要的内容== 。
</code></pre>
<div><span>1</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/mark/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="任务列表"> 任务列表</h3>
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-0"><label for="task-item-0"> 计划 1</label></li>
<li><input type="checkbox"  disabled="disabled" id="task-item-1"><label for="task-item-1"> 计划 2</label></li>
</ul>
<details><summary>Code</summary>
<div><pre><code><span>-</span> [x] 计划 1
<span>-</span> [ ] 计划 2
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/guide/markdown/tasklist/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="流程图"> 流程图</h3>
<i>Not supported content</i><details><summary>代码</summary>
<div><pre><code><span><span>```</span><span>flow</span>
<span>cond=>condition: Process?
process=>operation: Process
e=>end: End

cond(yes)->process->e
cond(no)->e</span>
<span>```</span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/flowchart/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h2 id="mermaid"> Mermaid</h2>
<Mermaid id="mermaid-64a57060" data-code="graph%20TD%3B%0A%20%20%20%20A--%3EB%3B%0A%20%20%20%20A--%3EC%3B%0A%20%20%20%20B--%3ED%3B%0A%20%20%20%20C--%3ED%3B%0A"></Mermaid><details><summary>代码</summary>
<div><pre><code><span><span>```</span><span>mermaid</span>
<span>graph TD;
    A-->B;
    A-->C;
    B-->D;
    C-->D;</span>
<span>```</span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/mermaid/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="tex-语法"> Tex 语法</h3>
<p class='katex-block'><span><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:2.4em;vertical-align:-0.95em;"></span><span><span></span><span><span><span><span style="height:1.3714em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span style="margin-right:0.05556em;">∂</span><span><span style="margin-right:0.03588em;">ω</span><span><span><span><span style="height:0.5904em;"><span style="top:-2.989em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.05556em;">∂</span><span><span><span><span style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.686em;"><span></span></span></span></span></span><span></span></span><span style="margin-right:0.1667em;"></span><span><span style="top:0em;"><span>(</span></span><span><span></span><span><span><span><span style="height:1.3414em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span style="margin-right:0.03588em;">ω</span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.03588em;">y</span><span><span><span><span style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.03588em;">ω</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.686em;"><span></span></span></span></span></span><span></span></span><span style="top:0em;"><span>)</span></span></span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:3.0277em;vertical-align:-1.2777em;"></span><span><span style="top:0em;"><span>(</span></span><span><span></span><span><span><span><span style="height:1.3414em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span style="margin-right:0.03588em;">ω</span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.03588em;">y</span><span><span><span><span style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.03588em;">ω</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.686em;"><span></span></span></span></span></span><span></span></span><span style="top:0em;"><span>)</span></span></span><span style="margin-right:0.1667em;"></span><span><span style="top:0em;"><span>{</span></span><span>(</span><span>lo<span style="margin-right:0.01389em;">g</span></span><span style="margin-right:0.1667em;"></span><span style="margin-right:0.03588em;">y</span><span><span>)</span><span><span><span><span style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span><span><span><span><span style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span style="height:3.05em;"></span><span><span><span>i</span><span>=</span><span>1</span></span></span></span><span style="top:-3.05em;"><span style="height:3.05em;"></span><span><span>∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span style="height:3.05em;"></span><span><span style="margin-right:0.02778em;">r</span></span></span></span><span>​</span></span><span><span style="height:1.2777em;"><span></span></span></span></span></span><span style="margin-right:0.1667em;"></span><span><span></span><span><span><span><span style="height:1.5017em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.03588em;">ω</span><span><span><span><span style="height:0.7507em;"><span style="top:-2.989em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span>(</span><span>−</span><span>1</span><span><span>)</span><span><span><span><span style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span></span></span></span></span><span style="margin-right:0.02778em;">r</span><span style="margin-right:0.1667em;"></span><span>⋯</span><span style="margin-right:0.1667em;"></span><span>(</span><span style="margin-right:0.02778em;">r</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span><span>i</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span><span>1</span><span>)</span><span>(</span><span>lo<span style="margin-right:0.01389em;">g</span></span><span style="margin-right:0.1667em;"></span><span style="margin-right:0.03588em;">y</span><span><span>)</span><span><span><span><span style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.02778em;">r</span><span>−</span><span>i</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.686em;"><span></span></span></span></span></span><span></span></span><span style="top:0em;"><span>}</span></span></span></span></span></span></span></p>
<details><summary>代码</summary>
<div><pre><code>$$
\frac {\partial^r} {\partial \omega^r} \left(\frac {y^{\omega}} {\omega}\right)
= \left(\frac {y^{\omega}} {\omega}\right) \left\{(\log y)^r + \sum_{i=1}^r \frac {(-1)^i r \cdots (r-i+1) (\log y)^{r-i}} {\omega^i} \right\}
$$
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/tex/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="代码案例"> 代码案例</h3>

          <div
            id="code-demo-5ac6bc9f"
           
  
 data-title="%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%20Demo"

            data-code="%7B%22html%22%3A%22%3Ch1%3EMr.Hope%3C%2Fh1%3E%5Cn%3Cp%3E%3Cspan%20id%3D%5C%22very%5C%22%3E%E5%8D%81%E5%88%86%3C%2Fspan%3E%20%E5%B8%85%3C%2Fp%3E%5Cn%22%2C%22js%22%3A%22document.querySelector(%5C%22%23very%5C%22).addEventListener(%5C%22click%5C%22%2C%20()%20%3D%3E%20%7B%5Cn%20%20alert(%5C%22%E5%8D%81%E5%88%86%E5%B8%85%5C%22)%3B%5Cn%7D)%3B%5Cn%22%2C%22css%22%3A%22span%20%7B%5Cn%20%20color%3A%20red%3B%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>h1</span><span>></span></span>Mr.Hope<span><span><span>&lt;/</span>h1</span><span>></span></span>
<span><span><span>&lt;</span>p</span><span>></span></span><span><span><span>&lt;</span>span</span> <span>id</span><span><span>=</span><span>"</span>very<span>"</span></span><span>></span></span>十分<span><span><span>&lt;/</span>span</span><span>></span></span> 帅<span><span><span>&lt;/</span>p</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><div><pre><code>document<span>.</span><span>querySelector</span><span>(</span><span>"#very"</span><span>)</span><span>.</span><span>addEventListener</span><span>(</span><span>"click"</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>alert</span><span>(</span><span>"十分帅"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>
            </div>
          </div>
          
        </div>
<details><summary>代码</summary>
<div><pre><code>::: demo 一个普通 Demo

<span><span>```</span><span>html</span>
<span><span><span><span>&lt;</span>h1</span><span>></span></span>Mr.Hope<span><span><span>&lt;/</span>h1</span><span>></span></span>
<span><span><span>&lt;</span>p</span><span>></span></span><span><span><span>&lt;</span>span</span> <span>id</span><span><span>=</span><span>"</span>very<span>"</span></span><span>></span></span>十分<span><span><span>&lt;/</span>span</span><span>></span></span> 帅<span><span><span>&lt;/</span>p</span><span>></span></span></span>
<span>```</span></span>

<span><span>```</span><span>js</span>
<span>document<span>.</span><span>querySelector</span><span>(</span><span>"#very"</span><span>)</span><span>.</span><span>addEventListener</span><span>(</span><span>"click"</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>alert</span><span>(</span><span>"十分帅"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span></span>
<span>```</span></span>

<span><span>```</span><span>css</span>
<span><span>span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span></span>
<span>```</span></span>

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div></details>

          <div
            id="code-demo-693e1878"
           
  data-type="react"
 data-title="%E4%B8%80%E4%B8%AA%20React%20Demo"

            data-code="%7B%22js%22%3A%22export%20default%20class%20App%20extends%20React.Component%20%7B%5Cn%20%20constructor(props)%20%7B%5Cn%20%20%20%20super(props)%3B%5Cn%20%20%20%20this.state%20%3D%20%7B%20message%3A%20%5C%22%E5%8D%81%E5%88%86%E5%B8%85%5C%22%20%7D%3B%5Cn%20%20%7D%5Cn%20%20render()%20%7B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%3Cdiv%20className%3D%5C%22box-react%5C%22%3E%5Cn%20%20%20%20%20%20%20%20Mr.Hope%20%3Cspan%3E%7Bthis.state.message%7D%3C%2Fspan%3E%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%5Cn%7D%5Cn%22%2C%22css%22%3A%22.box-react%20span%20%7B%5Cn%20%20color%3A%20red%3B%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span>export</span> <span>default</span> <span>class</span> <span>App</span> <span>extends</span> <span>React<span>.</span>Component</span> <span>{</span>
  <span>constructor</span><span>(</span><span>props</span><span>)</span> <span>{</span>
    <span>super</span><span>(</span>props<span>)</span><span>;</span>
    <span>this</span><span>.</span>state <span>=</span> <span>{</span> <span>message</span><span>:</span> <span>"十分帅"</span> <span>}</span><span>;</span>
  <span>}</span>
  <span>render</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>(</span>
      <span>&lt;</span>div className<span>=</span><span>"box-react"</span><span>></span>
        Mr<span>.</span>Hope <span>&lt;</span>span<span>></span><span>{</span><span>this</span><span>.</span>state<span>.</span>message<span>}</span><span>&lt;</span><span>/</span>span<span>></span>
      <span>&lt;</span><span>/</span>div<span>></span>
    <span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><div><pre><code><span>.box-react span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>
            </div>
          </div>
          
        </div>
<details><summary>代码</summary>
<div><pre><code>::: demo [react] 一个 React Demo

<span><span>```</span><span>js</span>
<span><span>export</span> <span>default</span> <span>class</span> <span>App</span> <span>extends</span> <span>React<span>.</span>Component</span> <span>{</span>
  <span>constructor</span><span>(</span><span>props</span><span>)</span> <span>{</span>
    <span>super</span><span>(</span>props<span>)</span><span>;</span>
    <span>this</span><span>.</span>state <span>=</span> <span>{</span> <span>message</span><span>:</span> <span>"十分帅"</span> <span>}</span><span>;</span>
  <span>}</span>
  <span>render</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>(</span>
      <span>&lt;</span>div className<span>=</span><span>"box-react"</span><span>></span>
        Mr<span>.</span>Hope <span>&lt;</span>span<span>></span><span>{</span><span>this</span><span>.</span>state<span>.</span>message<span>}</span><span>&lt;</span><span>/</span>span<span>></span>
      <span>&lt;</span><span>/</span>div<span>></span>
    <span>)</span><span>;</span>
  <span>}</span>
<span>}</span></span>
<span>```</span></span>

<span><span>```</span><span>css</span>
<span><span>.box-react span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span></span>
<span>```</span></span>

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div></details>

          <div
            id="code-demo-2c0b9cdb"
           
  data-type="vue"
 data-title="%E4%B8%80%E4%B8%AA%20Vue%20Demo"

            data-code="%7B%22vue%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20class%3D%5C%22box%5C%22%3E%5Cn%20%20%20%20Mr.Hope%20%3Cspan%3E%7B%7B%20message%20%7D%7D%3C%2Fspan%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%20%20data%3A%20()%20%3D%3E%20(%7B%20message%3A%20%5C%22%E5%8D%81%E5%88%86%E5%B8%85%5C%22%20%7D)%2C%5Cn%7D%3B%5Cn%3C%2Fscript%3E%5Cn%3Cstyle%3E%5Cn.box%20span%20%7B%5Cn%20%20color%3A%20red%3B%5Cn%7D%5Cn%3C%2Fstyle%3E%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>box<span>"</span></span><span>></span></span>
    Mr.Hope <span><span><span>&lt;</span>span</span><span>></span></span>{{ message }}<span><span><span>&lt;/</span>span</span><span>></span></span>
  <span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>
<span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>(</span><span>{</span> <span>message</span><span>:</span> <span>"十分帅"</span> <span>}</span><span>)</span><span>,</span>
<span>}</span><span>;</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;</span>style</span><span>></span></span><span><span>
<span>.box span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>style</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div>
            </div>
          </div>
          
        </div>
<details><summary>代码</summary>
<div><pre><code>::: demo [vue] 一个 Vue Demo

<span><span>```</span><span>vue</span>
<span>&lt;template>
  &lt;div>
    Mr.Hope &lt;span>{{ message }}&lt;/span>
  &lt;/div>
&lt;/template>
&lt;script>
export default {
  data: () => ({ message: "十分帅" }),
};
&lt;/script>
&lt;style>
.box span {
  color: red;
}
&lt;/style></span>
<span>```</span></span>

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div></details>

          <div
            id="code-demo-2869b0e2"
           
  
 data-title="%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%20Demo"

            data-code="%7B%22md%22%3A%22%23%20%E6%A0%87%E9%A2%98%5Cn%5Cn%E5%8D%81%E5%88%86%E5%B8%85%5Cn%22%2C%22ts%22%3A%22const%20message%3A%20string%20%3D%20%5C%22Mr.Hope%5C%22%3B%5Cn%5Cndocument.querySelector(%5C%22h1%5C%22).innerHTML%20%3D%20message%3B%5Cn%22%2C%22scss%22%3A%22h1%20%7B%5Cn%20%20font-style%3A%20italic%3B%5Cn%5Cn%20%20%2B%20p%20%7B%5Cn%20%20%20%20color%3A%20red%3B%5Cn%20%20%7D%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span>#</span> 标题</span>

十分帅
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>const</span> message<span>:</span> <span>string</span> <span>=</span> <span>"Mr.Hope"</span><span>;</span>

document<span>.</span><span>querySelector</span><span>(</span><span>"h1"</span><span>)</span><span>.</span>innerHTML <span>=</span> message<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>h1 </span><span>{</span>
  <span>font-style</span><span>:</span> italic<span>;</span>

  <span>+ p </span><span>{</span>
    <span>color</span><span>:</span> red<span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div>
            </div>
          </div>
          
        </div>
<details><summary>代码</summary>
<div><pre><code>::: demo 一个普通 Demo

<span><span>```</span><span>md</span>
<span><span><span>#</span> 标题</span>

十分帅</span>
<span>```</span></span>

<span><span>```</span><span>ts</span>
<span><span>const</span> message<span>:</span> <span>string</span> <span>=</span> <span>"Mr.Hope"</span><span>;</span>

document<span>.</span><span>querySelector</span><span>(</span><span>"h1"</span><span>)</span><span>.</span>innerHTML <span>=</span> message<span>;</span></span>
<span>```</span></span>

<span><span>```</span><span>scss</span>
<span><span>h1 </span><span>{</span>
  <span>font-style</span><span>:</span> italic<span>;</span>

  <span>+ p </span><span>{</span>
    <span>color</span><span>:</span> red<span>;</span>
  <span>}</span>
<span>}</span></span>
<span>```</span></span>

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/demo/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h3 id="幻灯片"> 幻灯片</h3>
<i>Not supported content</i><details><summary>代码</summary>
<div><pre><code>@slidestart

<span><span>##</span> 幻灯片 1</span>

一个有文字和 <span>[<span>链接</span>](<span>https://mrhope.site</span>)</span> 的段落

<span>---</span>

<span><span>##</span> 幻灯片 2</span>

<span>-</span> 列表 1
<span>-</span> 列表 2

<span>---</span>

<span><span>##</span> 幻灯片 3.1</span>

<span><span>```</span><span>js</span>
<span><span>const</span> a <span>=</span> <span>1</span><span>;</span></span>
<span>```</span></span>

--

<span><span>##</span> 幻灯片 3.2</span>

$$
J(\theta_0,\theta_1) = \sum_{i=0}
$$

@slideend
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/zh/guide/markdown/presentation/" target="_blank" rel="noopener noreferrer">点击查看</a></li>
</ul>
<h2 id="其他语法"> 其他语法</h2>
<div><p>自定义标题</p>
<p>信息容器</p>
</div>
<div><p>自定义标题</p>
<p>提示容器</p>
</div>
<div><p>自定义标题</p>
<p>警告容器</p>
</div>
<div><p>自定义标题</p>
<p>危险容器</p>
</div>
<details><summary>自定义标题</summary>
<p>详情容器</p>
</details>
<details><summary>代码</summary>
<div><pre><code>::: info 自定义标题

信息容器

:::

::: tip 自定义标题

提示容器

:::

::: warning 自定义标题

警告容器

:::

::: danger 自定义标题

危险容器

:::

::: details 自定义标题

详情容器

:::
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div></details>
<hr>
<section>
<ol>
<li id="footnote1"><p>这是脚注内容 </p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    <item>
      <title>密码加密的文章</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/guide/encrypt/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/guide/encrypt/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/rss.xml">密码加密的文章</source>
      <category>使用指南</category>
      <pubDate>Fri, 28 Jan 2022 12:41:51 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="密码加密的文章"> 密码加密的文章</h1>
<p>实际的文章内容。</p>
<p>段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字。</p>
<p>段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字。</p>
]]></content:encoded>
    </item>
    <item>
      <title>自定义布局</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/guide/layout/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/guide/layout/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/rss.xml">自定义布局</source>
      <category>使用指南</category>
      <pubDate>Thu, 20 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>您可以使用带有 Markdown 支持的插槽来自定义页面布局。</p>
<div><p>注意</p>
<p>此处仅仅是一个演示，你应该自行根据需求添加样式。</p>


</div>
<template #page-top><p>页面顶部内容</p>
</template><template #page-bottom><p>页面底部内容</p>
</template><template #content-top><p>内容顶部内容</p>
</template><template #content-bottom><p>内容底部内容</p>
</template><template #navbar-start><p>导航栏起始内容</p>
</template><template #navbar-center><p>导航栏中部内容</p>
</template><template #navbar-end><p>导航栏末尾内容</p>
</template><template #sidebar-top><p>侧边栏顶部内容</p>
</template><template #sidebar-center><p>侧边栏中部内容</p>
</template><template #sidebar-bottom><p>侧边栏底部内容</p>
</template><p>更多详情，详见 <a href="https://vuepress-theme-hope.github.io/zh/guide/layout/custom/" target="_blank" rel="noopener noreferrer">自定义布局</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>页面配置</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/guide/page/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/guide/page/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/rss.xml">页面配置</source>
      <category>使用指南</category>
      <pubDate>Wed, 01 Jan 2020 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="页面信息"> 页面信息</h2>
<p>你可以在 Markdown 的 Frontmatter 中设置页面信息。</p>
<ul>
<li>
<p>作者设置为 Ms.Hope。</p>
</li>
<li>
<p>写作时间应为 2020 年 1 月 1 日</p>
</li>
<li>
<p>分类为 “使用指南”</p>
</li>
<li>
<p>标签为 “页面配置” 和 “使用指南”</p>
</li>
</ul>
<h2 id="页面内容"> 页面内容</h2>
<p>你可以自由在这里书写你的 Markdown。</p>
<div><p>提示</p>
<ul>
<li>
<p>Markdown 文件夹的图片请使用相对链接 <code>./</code> 进行引用。</p>
</li>
<li>
<p><code>.vuepress/public</code> 文件夹的图片，请使用绝对链接 <code>/</code> 进行引用</p>
</li>
</ul>
</div>
<p>主题包含了一个自定义徽章章可以使用:</p>
<blockquote>
<p>文字结尾应该有深蓝色的 徽章文字 徽章。 <i>Not supported content</i></p>
</blockquote>
<h2 id="页面结构"> 页面结构</h2>
<p>此页面应当包含：</p>
<ul>
<li>返回顶部按钮</li>
<li>路径导航</li>
<li>评论</li>
<li>页脚</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>幻灯片页</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/guide/slides/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/guide/slides/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/rss.xml">幻灯片页</source>
      <category>使用指南</category>
      <pubDate>Mon, 17 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<i>Not supported content</i>]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-demo.mrhope.site/logo.svg" type="image/svg+xml"/>
    </item>
    <item>
      <title>如何在uni-app中计算出微信小程序导航栏的高度</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/mp/%E5%A6%82%E4%BD%95%E5%9C%A8uni-app%E4%B8%AD%E8%AE%A1%E7%AE%97%E5%87%BA%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AF%BC%E8%88%AA%E6%A0%8F%E7%9A%84%E9%AB%98%E5%BA%A6/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/mp/%E5%A6%82%E4%BD%95%E5%9C%A8uni-app%E4%B8%AD%E8%AE%A1%E7%AE%97%E5%87%BA%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AF%BC%E8%88%AA%E6%A0%8F%E7%9A%84%E9%AB%98%E5%BA%A6/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/rss.xml">如何在uni-app中计算出微信小程序导航栏的高度</source>
      <category>小程序</category>
      <pubDate>Sat, 19 Mar 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="为什么要拿到导航栏的高度"> 为什么要拿到导航栏的高度</h2>
<p>拿到导航栏的高度当然是为了<strong>自定义导航栏</strong>，<code>uniapp</code>默认为我们提供了一个导航栏，也就是每个页面上面的标题，但如果对这个默认的导航栏不满意，我们就可以选择自定义导航栏，比如我在下面，为了满足业务需求，放了一个搜索框，取代了原先的标题栏。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0815c92e235e44b4978d8e09c03caea0~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220319133342326" loading="lazy"></p>
<p>不仅仅是在导航栏放放东西，如果你要导航栏<strong>自定义大背景</strong>，也需要自定义导航栏，如下(图片来源网络)：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3086cb38c48a43bfadc55e56a54be050~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220319133244566" loading="lazy"></p>
<h2 id="小程序头部的几个参数"> 小程序头部的几个参数</h2>
<p>如果我们要开启页面自义定导航栏，以首页<code>index</code>为例，我们要在<code>pages.json</code>中加入以下代码，它默认是<code>default</code>。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/40d41da508b14043929ff8ff1dc8a0f9~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220319134134085" loading="lazy"></p>
<p>我们再来看看几个参数</p>
<ul>
<li>头部高度</li>
<li>状态栏高度</li>
<li>导航栏高度（标题栏高度）</li>
<li>微信小程序小胶囊的位置信息</li>
</ul>
<h3 id="头部高度"> 头部高度</h3>
<p>我们可以把小程序页面分为三块，一个是页面的<code>头部</code>，就是图片所示的部分，还有就是页面的<code>主体</code>，平时我们写代码那块，最后就是<code>尾部tabbar</code>那块。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd28af3a6d984608a5b10aa962371adb~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220319131537760" loading="lazy"></p>
<h3 id="状态栏高度"> 状态栏高度</h3>
<p>状态栏就是我们手机显示电量，wifi的那部分，也算是头部的组成之一。这个<code>状态栏高度</code>我们可以很轻易地就能拿到，也就是调用<code>uni.getSystemInfoSync().statusBarHeight</code>。</p>
<p><img src="https://s2.loli.net/2022/03/19/fCFYk9Z6OVIeAiK.png" alt="image-20220319185737373" loading="lazy"></p>
<h3 id="导航栏高度-标题栏"> 导航栏高度（标题栏）</h3>
<p>导航栏就是默认的标题栏，微信小程序的小胶囊是在导航栏垂直居中的，我们要说的就是算导航栏的高度。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/601aab9d6bf94c98b2d113c04fc23ab1~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220319135352677" loading="lazy"></p>
<p>这个我们在不能在<code>uniapp</code>中直接拿到，可以看看官方的文档，我们要拿的就是<code>微信小程序</code>的导航栏高度。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a0012a3d1a84fb1acdfd680ef066c76~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220319135809448" loading="lazy"></p>
<h3 id="微信小程序小胶囊的位置信息"> 微信小程序小胶囊的位置信息</h3>
<p>其实我们调用原生微信小程序<code>api</code>也不能直接拿到导航栏高度......，但我们可以拿到微信小程序右上角小胶囊的<code>宽高</code>和<code>定位信息</code>，我们可以调用原生微信小程序api拿到，这些信息我们后面算<code>导航栏高度</code>的时候要用到。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d04d9accf4a7435face863b4393498b2~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220319140141386" loading="lazy"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68383eebc9ab470283bb79285b98fc47~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220319140321949" loading="lazy"></p>
<p>这个小胶囊的<code>定位信息</code>是相对于<code>小程序头部</code>来看的</p>
<div><pre><code><span>// #ifdef MP-WEIXIN</span>
<span>// 获取微信胶囊的位置信息 width,height,top,right,left,bottom</span>
<span>const</span> custom <span>=</span> wx<span>.</span><span>getMenuButtonBoundingClientRect</span><span>(</span><span>)</span>
<span>// console.log(custom)</span>
<span>// #endif</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="计算微信小程序的导航栏高度"> 计算微信小程序的导航栏高度</h2>
<p>因为每一个部手机的导航栏高度是不一样的，我们应该动态的去获取导航栏的高度，像上面的搜索框，我们要怎么让搜索框和微信小胶囊垂直居中呢，因为<code>小胶囊</code>是在导航栏中垂直居中，所以我们也要让<code>搜索框</code>在导航栏中垂直居中，那么我们就要拿<code>导航栏的高度</code>，然后就可以轻松的通过<code>flex</code>布局实现垂直居中了。</p>
<h3 id="计算公式"> 计算公式</h3>
<p>先看一下图吧</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/87fbf0e7d606446f8f3136f6bd9496f7~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220319141800793" loading="lazy"></p>
<p>因为小胶囊在导航栏中是垂直居中的，所以说，小胶囊距离导航栏顶部的距离和距离底部的距离是一样的，由此我们可以推算出计算公式：</p>
<ul>
<li><code>导航栏的高度</code> = 胶囊高度 + (顶部距离 - 状态栏高度) * 2</li>
<li><code>头部高度</code> = 导航栏高度 + 状态栏高度</li>
</ul>
<p>然后我的建议是可以把这写参数封装在<code>uniapp</code>的全局的变量<code>globalData</code>中，哪个页面要用就可以直接拿，而且拿起来也非常方便。</p>
<p>我们不需要用<code>vuex</code>去管理，因为这个一开始就确立的，后面不用改，并不涉及<code>状态管理</code>。</p>
<h2 id="代码实现"> 代码实现</h2>
<p>最后，再来看看我写的代码吧。</p>
<p><code>App.vue</code>：</p>
<div><pre><code><span>&lt;</span>script<span>></span>
<span>export</span> <span>default</span> <span>{</span>
  <span>globalData</span><span>:</span> <span>{</span>
    <span>statusBarHeight</span><span>:</span> <span>0</span><span>,</span> <span>// 状态导航栏高度</span>
    <span>navHeight</span><span>:</span> <span>0</span><span>,</span> <span>// 总体高度</span>
    <span>navigationBarHeight</span><span>:</span> <span>0</span><span>,</span> <span>// 导航栏高度(标题栏高度)</span>
  <span>}</span><span>,</span>
  <span>onLaunch</span><span>:</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>"App Launch"</span><span>)</span>

    <span>// 状态栏高度</span>
    <span>this</span><span>.</span>globalData<span>.</span>statusBarHeight <span>=</span> uni<span>.</span><span>getSystemInfoSync</span><span>(</span><span>)</span><span>.</span>statusBarHeight

    <span>// #ifdef MP-WEIXIN</span>
    <span>// 获取微信胶囊的位置信息 width,height,top,right,left,bottom</span>
    <span>const</span> custom <span>=</span> wx<span>.</span><span>getMenuButtonBoundingClientRect</span><span>(</span><span>)</span>
    <span>// console.log(custom)</span>

    <span>// 导航栏高度(标题栏高度) = 胶囊高度 + (顶部距离 - 状态栏高度) * 2</span>
    <span>this</span><span>.</span>globalData<span>.</span>navigationBarHeight <span>=</span> custom<span>.</span>height <span>+</span> <span>(</span>custom<span>.</span>top <span>-</span> <span>this</span><span>.</span>globalData<span>.</span>statusBarHeight<span>)</span> <span>*</span> <span>2</span>
    <span>// console.log("导航栏高度："+this.globalData.navigationBarHeight)</span>

    <span>// 总体高度 = 状态栏高度 + 导航栏高度</span>
    <span>this</span><span>.</span>globalData<span>.</span>navHeight <span>=</span> <span>this</span><span>.</span>globalData<span>.</span>navigationBarHeight <span>+</span> <span>this</span><span>.</span>globalData<span>.</span>statusBarHeight

    <span>// #endif</span>

    console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>globalData<span>)</span>
  <span>}</span><span>,</span>
  <span>onShow</span><span>:</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>"App Show"</span><span>)</span>
  <span>}</span><span>,</span>
  <span>onHide</span><span>:</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>"App Hide"</span><span>)</span>
  <span>}</span><span>,</span>
<span>}</span>
<span>&lt;</span><span>/</span>script<span>></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div><p>我们可以做的更好些，把这个封装到<code>mixin.js</code>，我们哪个页面要用这些参数，就直接导入<code>混入</code>，然后在生命周期<code>onLoad</code>中调用下就好了。</p>
<p><code>mixin.js</code>：</p>
<div><pre><code><span>export</span> <span>const</span> systemInfo <span>=</span> <span>{</span>
  <span>data</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>(</span><span>{</span>
    <span>statusBarHeight</span><span>:</span> <span>0</span><span>,</span>
    <span>navigationBarHeight</span><span>:</span> <span>0</span><span>,</span>
    <span>navHeight</span><span>:</span> <span>0</span><span>,</span>
    <span>windowHeight</span><span>:</span> <span>0</span><span>,</span> <span>// 可使用窗口高度</span>
  <span>}</span><span>)</span><span>,</span>

  <span>methods</span><span>:</span> <span>{</span>
    <span>// 获取设备信息</span>
    <span>getSystemInfo</span><span>(</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>statusBarHeight <span>=</span> <span>getApp</span><span>(</span><span>)</span><span>.</span>globalData<span>.</span>statusBarHeight
      <span>this</span><span>.</span>navigationBarHeight <span>=</span> <span>getApp</span><span>(</span><span>)</span><span>.</span>globalData<span>.</span>navigationBarHeight
      <span>this</span><span>.</span>windowHeight <span>=</span> uni<span>.</span><span>getSystemInfoSync</span><span>(</span><span>)</span><span>.</span>windowHeight
      <span>this</span><span>.</span>navHeight <span>=</span> <span>getApp</span><span>(</span><span>)</span><span>.</span>globalData<span>.</span>navHeight
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ad02a8af51ce43c4866d36b87bb12f69~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220319150304609" loading="lazy"></p>
<h2 id="补充"> 补充</h2>
<p><strong>还有一个点要说的是</strong>：我为什么不在<code>globalData</code>中直接去拿可使用窗口高度<code>windowHeight</code>呢？</p>
<p>这也是我踩的一个坑，我们讲讲<code>可使用窗口高度</code>，我们不定义导航栏，那么</p>
<ul>
<li><code>windowHeight</code> = 屏幕高度 - <code>tabbar高度</code> -  头部高度</li>
</ul>
<p>如果我们自定义了导航栏，则</p>
<ul>
<li><code>windowHeight</code> = 屏幕高度 - <code>tabbar高度</code></li>
</ul>
<p>我们并不是每个页面的都要自定义导航栏，那么，每个页面的<code>windowHeight</code>是有所不同的，所以说，我们不能在小程序加载后，就定死<code>windowHeight</code>，我们应该根据每个页面去拿<code>windowHeight</code>。</p>
<h2 id="结语"> 结语</h2>
<p>感谢读完本篇文章，希望对你能有所帮助，如有问题欢迎各位在评论区指正。</p>
<p>创作不易，希望可以点个赞支持一下❤️❤️。</p>
]]></content:encoded>
      <enclosure url="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0815c92e235e44b4978d8e09c03caea0~tplv-k3u1fbpfcp-zoom-1.image" type="image/"/>
    </item>
    <item>
      <title>关于作者</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/intro/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/intro/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/rss.xml">关于作者</source>
      <content:encoded><![CDATA[<h1 id="关于作者"> 关于作者</h1>
<p>一名大二学生，软件工程专业。
<code>前端攻城狮</code>，努力学习技术中。</p>
<p>来到这就是缘分，谢谢！😊😊</p>
]]></content:encoded>
    </item>
    <item>
      <title>这可能是最好、最详细的VSCode写uni-app教程吧</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/mp/%E8%BF%99%E5%8F%AF%E8%83%BD%E6%98%AF%E6%9C%80%E5%A5%BD%E3%80%81%E6%9C%80%E8%AF%A6%E7%BB%86%E7%9A%84VSCode%E5%86%99uni-app%E6%95%99%E7%A8%8B%E5%90%A7/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/mp/%E8%BF%99%E5%8F%AF%E8%83%BD%E6%98%AF%E6%9C%80%E5%A5%BD%E3%80%81%E6%9C%80%E8%AF%A6%E7%BB%86%E7%9A%84VSCode%E5%86%99uni-app%E6%95%99%E7%A8%8B%E5%90%A7/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/rss.xml">这可能是最好、最详细的VSCode写uni-app教程吧</source>
      <category>小程序</category>
      <pubDate>Mon, 25 Apr 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="开始"> 开始</h2>
<p>我们将使用VSCode写<code>uni-app</code>，不同于<code>Hbuilder X</code>，用VSCode是通过脚手架来创建项目，为什么我要用VSCode写呢？可能还是不太习惯<strong>Hbuilder X</strong>等等原因，还有就是不想换开发工具，觉得开发前端一个VSCode就够了，也不用去比较两者谁好谁坏，自己喜欢哪个用哪个，这里就不过多赘述了。</p>
<p>自己也用VSCode做了几个<code>uni-app</code>项目了，主要是写小程序，总体体验下来还是非常不错的。</p>
<p><img src="https://s2.loli.net/2022/04/25/p8tFea74ZnjEsKh.png" alt="VSCode开发uni-app" loading="lazy"></p>
<p><strong>简述一下</strong>这个教程能给VSCode开发<code>uni-app</code>带来的体验</p>
<ul>
<li>增强<code>pages.json</code>和<code>manifest.json</code>开发体验（语法提示、颜色块、写注释）</li>
<li>一键创建页面、组件、分包</li>
<li>完善的<code>API</code>，组件，uni.scss语法提示</li>
<li>条件编译注释高亮</li>
</ul>
<p>可以说，VSCode开发<code>uni-app</code>的槽点基本上都解决了，有很多地方我觉得体验还更好。</p>
<blockquote>
<p>文章比较长，写的也比较详细，小白也能看懂。</p>
</blockquote>
<h2 id="初始化项目"> 初始化项目</h2>
<p>我们使用 vue2 创建工程作为示例，uni-app中Vue2版的组件库和插件也比较多，稳定、问题少，可以先参考下官方文档：<a href="https://uniapp.dcloud.io/worktile/CLI.html#uni-cli" target="_blank" rel="noopener noreferrer">工程化</a></p>
<p>既然是使用vue脚手架，那肯定要全局安装<code>@vue/cli</code>，已安装的可以跳过。</p>
<blockquote>
<p><strong>注意</strong>：Vue2创建的项目，脚手架版本要用@4的版本，用@5的版本运行项目会报错，这里推荐**@4.5.15**</p>
</blockquote>
<div><pre><code><span>npm</span> <span>install</span> -g @vue/cli
</code></pre>
<div><span>1</span><br></div></div><p>创建项目，后面是你的项目名字。</p>
<div><pre><code>vue create -p dcloudio/uni-preset-vue uni_vue2_cli
</code></pre>
<div><span>1</span><br></div></div><p>这里我们选择<strong>默认模板</strong>。</p>
<p><img src="https://s2.loli.net/2022/04/25/eZz7qXvanPy1oTh.png" alt="image-20220425115206383" loading="lazy"></p>
<p>在VSCode打开这个项目，可以看看整个项目项目结构，<code>src</code>下项目结构跟<code>HbuilderX</code>创建的根目录基本一样，说明两种项目转换还是比较方便的。</p>
<blockquote>
<p><strong>提示</strong>：既然是Vue2项目，有<code>scss</code>文件，那肯定要装<code>vetur</code>和<code>sass</code>这两个插件吧，不会有人没有装吧😅😅。</p>
</blockquote>
<p><img src="https://s2.loli.net/2022/04/24/pMZkDAdnFcfSgva.png" alt="image-20220424230550420" loading="lazy"></p>
<h2 id="tsconfig-json报错问题"> tsconfig.json报错问题</h2>
<p><img src="https://s2.loli.net/2022/04/24/XM7yKRe5k4tr8NH.png" alt="image-20220424230750672" loading="lazy">创建tsconfig.json配置文件时，VSCode会自动检测当前项目当中是否有ts文件，若没有则报错，提示用户需要创建一个ts文件后，再去使用typescript。其实即使报红，但运行项目是没有问题的，但有强迫症的人肯定受不了，不可能一直看着报错吧。</p>
<p>解决方案很简单，就是在项目根目录下，随便建一个<code>ts</code>文件，不用写任何东西，然后在<code>tsconfig.json</code>配置 <code>files</code>这个就好了。</p>
<p>我们在项目根目录下新建一个<code>puppet.ts</code>，<strong>puppet</strong>：<strong>傀儡</strong>的意思，哈哈。</p>
<p><img src="https://s2.loli.net/2022/04/24/xIMPBGcUdeoZ6yJ.png" alt="image-20220424232029882" loading="lazy"></p>
<p><strong><code>tsconfig.json</code></strong>：</p>
<div><pre><code><span>{</span>
  <span>"compilerOptions"</span><span>:</span> <span>{</span>
    <span>"types"</span><span>:</span> <span>[</span><span>"@dcloudio/types"</span><span>,</span> <span>"miniprogram-api-typings"</span><span>,</span> <span>"mini-types"</span><span>]</span>
  <span>}</span><span>,</span>
  <span>"files"</span><span>:</span> <span>[</span><span>"puppet.ts"</span><span>]</span>
<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="增强pages-json和manifest-json开发体验"> 增强pages.json和manifest.json开发体验</h2>
<h3 id="json文件写注释"> json文件写注释</h3>
<p>我们打开<code>pages.json</code>和<code>manifest.json</code>，发现会报红，这是因为在<code>json</code>中是不能写注释的，而在<code>jsonc</code>是可以写注释的。</p>
<p><img src="https://s2.loli.net/2022/04/24/EdXenjt8I26f9L4.png" alt="image-20220424232513887" loading="lazy"></p>
<p><strong>解决方案</strong>：我们把<code>pages.json</code>和<code>manifest.json</code>这两个文件关联到<code>jsonc</code>中，然后就以写注释了。在设置中打开<code>settings.json</code>，添加：</p>
<p><img src="https://s2.loli.net/2022/04/24/NOPXF8ihrvQESpA.png" alt="image-20220424233045910" loading="lazy"></p>
<p>千万不要把所有<code>json</code>文件都关联到<code>jsonc</code>中，你感觉在<code>json</code>中都能写<strong>注释</strong>了，觉得更好用了，其实不然，json就是json，jsonc就是jsonc，这两个是不一样的，例如，你在<code>package.json</code>写注释VSCode是不报错了，但<strong>编译</strong>的时候还是会报错的，因为<code>package.json</code>就是不能写注释的。</p>
<h3 id="语法提示"> 语法提示</h3>
<p>很多人刚开始使用<code>VSCode</code>写<code>uni-app</code>时，因为<code>pages.json</code>没有任何语法提示，直接被劝退了，当初我也差点被劝退了，不过经过我的不懈努力，终于解决了。</p>
<p>其实现在VSCode已经有第三方插件提供<strong>语法提示</strong>和简单的<strong>校验</strong>了，体验也是相当的不错。</p>
<p><img src="https://s2.loli.net/2022/04/24/r5kReuLTbnQZXhF.png" alt="image-20220424234224718" loading="lazy"></p>
<p>而且鼠标悬浮还有提示，相当的贴心了。</p>
<p><img src="https://s2.loli.net/2022/04/24/jIP9QysaRdG8kqX.gif" alt="1" loading="lazy"></p>
<h3 id="颜色块显示"> 颜色块显示</h3>
<p>VSCode在<code>json</code>文件是不显示像<code>css</code>中一样的<code>颜色块</code>，但有个插件可以帮我们做到。</p>
<p><img src="https://s2.loli.net/2022/04/24/ZsQduOgPLWAox3J.png" alt="image-20220424235048441" loading="lazy"></p>
<p>当然，我们要对这个插件进行相关的配置，以便更好的使用。</p>
<div><pre><code><span>"color-highlight.enable"</span><span>:</span> <span>true</span><span>,</span> <span>// 开启插件</span>
<span>// 颜色块的样式，这里我选择了跟VSCode中css差不多样子的颜色块，自己选择喜欢的就行</span>
<span>"color-highlight.markerType"</span><span>:</span> <span>"dot-before"</span><span>,</span> 
<span>// 这个插件起效果的语言，这里设置只在jsonc起作用</span>
<span>"color-highlight.languages"</span><span>:</span> <span>[</span><span>"jsonc"</span><span>]</span><span>,</span>
<span>// 是否在旁边的滚条显示颜色，个人觉得不好看，关了</span>
<span>"color-highlight.markRuler"</span><span>:</span> <span>false</span><span>,</span>
<span>// 是否匹配单词，如white，black</span>
<span>"color-highlight.matchWords"</span><span>:</span> <span>false</span><span>,</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p><img src="https://s2.loli.net/2022/04/25/2zYcZgdT6AWoMeq.png" alt="image-20220425000140421" loading="lazy"></p>
<h2 id="一键创建页面、组件、分包"> 一键创建页面、组件、分包</h2>
<p>然后就是怎么快速创建页面、组件、分包，那就要推荐以下这款插件了，支持一键创建，并且添加到<code>paegs,json</code>中。</p>
<p><img src="https://s2.loli.net/2022/04/25/Hh4eDySj8zqNQkJ.png" alt="image-20220425103031219" loading="lazy"></p>
<p><img src="https://s2.loli.net/2022/04/25/5RcWtmTKNXjELJC.png" alt="image-20220425103420274" loading="lazy"></p>
<p><img src="https://s2.loli.net/2022/04/25/xPR7FyNEKvI2njM.gif" alt="2" loading="lazy"></p>
<h2 id="条件编译注释高亮"> 条件编译注释高亮</h2>
<p>在<strong>Hubilder X</strong>条件注释是有高亮的，以便区分开普通注释，在VSCode也有对应的插件可以实现，不得不说，VSCode的生态真的太好了，要啥插件都有。</p>
<p><img src="https://s2.loli.net/2022/04/25/6Iaj2ycG7vgokQq.png" alt="image-20220425104159161" loading="lazy"></p>
<p><img src="https://s2.loli.net/2022/04/25/kCyJEhDzm9ucnxB.gif" alt="3" loading="lazy"></p>
<p>这个插件可以定制化我们的注释，比如<strong>颜色</strong>、<strong>加粗</strong>、<strong>斜体</strong>，怎么好看怎么来。</p>
<div><pre><code><span>"better-comments.tags"</span><span>:</span><span>[</span>
  <span>{</span>
    <span>"tag"</span><span>:</span> <span>"#"</span><span>,</span>
    <span>"color"</span><span>:</span> <span>"#18b566"</span><span>,</span>
    <span>"strikethrough"</span><span>:</span> <span>false</span><span>,</span>
    <span>"underline"</span><span>:</span> <span>false</span><span>,</span>
    <span>"backgroundColor"</span><span>:</span> <span>"transparent"</span><span>,</span>
    <span>"bold"</span><span>:</span> <span>true</span><span>,</span>
    <span>"italic"</span><span>:</span> <span>false</span>
   <span>}</span><span>,</span>
<span>]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id="api-组件-uni-scss语法提示"> API，组件，uni.scss语法提示</h2>
<h3 id="api语法提示"> API语法提示</h3>
<p>用Vue2创建的<code>uni-app</code>的cli项目默认是已经安装对应的<code>Api</code>语法提示，并且默认已经在<code>tscongfig.json</code>配置好了，有三个：</p>
<ul>
<li><strong>@dcloudio/types</strong>，<code>uni</code>语法提示</li>
<li>**miniprogram-api-typings **，微信小程序<code>wx</code>语法提示</li>
<li><strong>mini-types</strong>，支付宝小程序<code>my</code>语法提示</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/25/kRSG65rUXwnPVd4.png" alt="image-20220425110302209" loading="lazy"></p>
<p><img src="https://s2.loli.net/2022/04/25/p8SRYwhKzdfOXil.gif" alt="4" loading="lazy"></p>
<h3 id="组件提示"> 组件提示</h3>
<p>接下来就是组件语法提示，如<code>&lt;view&gt;</code>、<code>&lt;button&gt;</code>等uni-app原生组件，这个需要我们手动安装对应的依赖包。</p>
<div><pre><code><span>npm</span> i @dcloudio/uni-helper-json
</code></pre>
<div><span>1</span><br></div></div><p><img src="https://s2.loli.net/2022/04/25/jaKdOVehntvWTYC.gif" alt="5" loading="lazy"></p>
<p>如果你觉得还不够好用，你还可以安装第三方插件来提供和<strong>Hbuilder X</strong>一样的<code>代码块</code>，推荐插件：<a href="https://marketplace.visualstudio.com/items?itemName=evils.uniapp-vscode" target="_blank" rel="noopener noreferrer">uniapp小程序扩展</a>、<a href="https://marketplace.visualstudio.com/items?itemName=ModyQyW.vscode-uni-app-snippets" target="_blank" rel="noopener noreferrer">uni-app-snippets</a></p>
<h3 id="uni-scss变量提示"> uni.scss变量提示</h3>
<blockquote>
<p><strong>注意</strong>：<strong>cli</strong>创建的uni-app项目，跟web项目一样，需要安装对应的sass模块，才能写scss。安装sass-loader，建议版本@10，否则可能会导致vue与sass的兼容问题而报错。</p>
</blockquote>
<div><pre><code><span>npm</span> i sass sass-loader@10 -D
</code></pre>
<div><span>1</span><br></div></div><p>安装<code>SCSS IntelliSense</code>插件，就可以提示你项目中<code>scss</code>文件中定义的变量了。</p>
<p><img src="https://s2.loli.net/2022/04/25/tmk7Z1sRj9BC5hX.png" alt="image-20220425142338060" loading="lazy"></p>
<p><img src="https://s2.loli.net/2022/04/25/QusH7zgKUtlJOcG.gif" alt="7" loading="lazy"></p>
<h2 id="运行、发布项目"> 运行、发布项目</h2>
<p>对应的命令在<code>package.json</code>，中，可以自行查看。</p>
<ul>
<li>npm run dev:%PLATFORM%</li>
<li>npm run build:%PLATFORM%</li>
</ul>
<p>发现命令还是比较长的，其实有更简便的方式，VSCode支持一键运行<code>npm</code><strong>脚本</strong>，我们以微信小程序为例。</p>
<p><img src="https://s2.loli.net/2022/04/25/m1A8SYdBW4cUxah.gif" alt="6" loading="lazy"></p>
<p><img src="https://s2.loli.net/2022/04/25/UqjHFPm7YnIBRKc.png" alt="image-20220425121019517" loading="lazy"></p>
<p><code>VSCode</code>跟<code>Hbuilder x</code>不同的是，VSCode不会自动在<strong>微信开发者工具</strong>导入项目并打开，我们需要手动导入项目，只需要导入一次就行了，以后直接打开<strong>微信开发者工具</strong>就行了。</p>
<p>需要注意的是，需要在<code>manifest.json</code>配置微信小程序<code>appid</code>，不然微信开发者工具会报错。</p>
<p><img src="https://s2.loli.net/2022/04/25/BMIFanAqyt5dSxP.png" alt="image-20220425121331808" loading="lazy"></p>
<p>在<strong>微信开发者工具</strong>导入打包出来的文件夹。</p>
<p><img src="https://s2.loli.net/2022/04/25/IQNcVJjlqiX49vG.png" alt="image-20220425121540349" loading="lazy"></p>
<p><img src="https://s2.loli.net/2022/04/25/3AfacodvwhNKCZV.png" alt="image-20220425121643386" loading="lazy"></p>
<p>然后，就可以愉快的写代码了。不管是运行项目，还是差量化编译速度还是非常快的。</p>
<h2 id="使用-vue3-创建工程"> 使用 vue3 创建工程</h2>
<p>尤雨溪宣布Vue 3 在 <strong>2022 年 2 月 7 日</strong>成为新的默认版本，但目前uni-app对应的Vue3版的<strong>组件库</strong>和<strong>插件</strong>还是有点少了。</p>
<p>使用Vue3创建项目跟Vue2有点区别，Vue3创建的项目采用的是<code>vite</code>，有一说一，<code>vite</code>是真的快，初始化项目的时候遇到了一些坑，这里说一下。</p>
<p><img src="https://s2.loli.net/2022/04/25/QUlAYHvzwTNtu5G.png" alt="image-20220425151032580" loading="lazy"></p>
<p>我一开始也卡住了，访问仓库失败，官方文档也说了解决方案，看了下，就是去更新下<code>@dcloudio/uvm</code>。</p>
<div><pre><code>npx @dcloudio/uvm
</code></pre>
<div><span>1</span><br></div></div><p>然后再试一下就没问题了，这里以<code>javascript</code>模板为例</p>
<div><pre><code>npx degit dcloudio/uni-preset-vue<span>#vite uni_vue3_cli</span>
</code></pre>
<div><span>1</span><br></div></div><p><strong>还有一个坑</strong>，就是Vue3创建的项目默认不安装<code>API</code><strong>语法提示</strong>依赖，所以要我们手动去安装一下，然后去<code>tsconfig.json</code>配置一下。</p>
<div><pre><code><span>npm</span> i @dcloudio/types miniprogram-api-typings mini-types -D
</code></pre>
<div><span>1</span><br></div></div><p>VSCode有<strong>尤雨溪团队</strong>专门为<code>Vue3</code>打造的插件<a href="https://github.com/johnsoncodehk/volar" target="_blank" rel="noopener noreferrer">Volar</a>，写Vue3就用**<code>Volar</code><strong>，再配合<code>Vite</code>，开发体验真的很</strong>nice**，这里就不过多讲了。</p>
<p><img src="https://s2.loli.net/2022/04/25/L5s2dmDUMVOTagz.png" alt="image-20220425153428114" loading="lazy"></p>
<h2 id="dcloud插件市场的使用"> DCloud插件市场的使用</h2>
<p>VSCode不能像Hbuilder X一样一键导入插件，一般用<strong>cli</strong>创建的项目要使用插件，一般有两种方式，第一种是支持<code>npm</code>安装的，那就用<code>npm</code>最好，如<code>uViewUI</code>，另一种不支持<code>npm</code>安装的，那就下载对应的<code>zip压缩包</code>，放到项目中，这种一般会有两个版本，我们选择<strong>非uni_modules版本</strong>，如<code>uCharts</code>。</p>
<p><img src="https://s2.loli.net/2022/04/25/AGjXDlOtYZq1ozu.png" alt="image-20220425124446742" loading="lazy"></p>
<p>这点确实没有Hbuilder X方便，不过导入第三方插件这种事情不是经常做，这还是可以接受的。</p>
<h2 id="插件推荐"> 插件推荐</h2>
<p>然后顺手推荐几个非常实用的插件，帮助我们提高开发效率。</p>
<ul>
<li>Image preview</li>
<li>Path Intellisense</li>
</ul>
<p>鼠标悬停可以预览图片。<img src="https://s2.loli.net/2022/04/25/Pr82ujogSKXfe3H.png" alt="image-20220425154709042" loading="lazy"></p>
<div><pre><code><span>"gutterpreview.showImagePreviewOnGutter"</span><span>:</span> <span>false</span><span>,</span><span>// 关闭在行号中显示缩列图</span>
</code></pre>
<div><span>1</span><br></div></div><p>这个插件可以帮助我们配置<strong>路径别名</strong>，路径智能感知。</p>
<p><img src="https://s2.loli.net/2022/04/25/QE93HwTctUg8k7G.png" alt="image-20220425155336510" loading="lazy"></p>
<div><pre><code><span>"path-intellisense.mappings"</span><span>:</span> <span>{</span>
    <span>"@"</span><span>:</span> <span>"<span>${workspaceRoot}</span>/src/"</span>,
    <span>"static"</span><span>:</span> <span>"<span>${workspaceRoot}</span>/src/static"</span>
 <span>}</span>,
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p><img src="https://s2.loli.net/2022/04/25/DQurv1j8H6LW3Rt.gif" alt="8" loading="lazy"></p>
<p>还有两个是组件库语法提示、代码块的插件，自己根据需要去安装，这里就不过多赘述了。</p>
<ul>
<li>uniapp小程序扩展</li>
<li>uni-ui-snippets</li>
</ul>
<h2 id="结语"> 结语</h2>
<p>总的来说，配置起来还是比较麻烦的，插件也比较多，但最终获得体验也是非常不错的。</p>
<p>因为<code>uni-app</code>项目跟其他前端项目差异较大，我还是比较推荐为<code>uni-app</code>项目单独做个<strong>VSCode工作区</strong>。对于<strong>VSCode工作区概念</strong>，可以看看我的这篇文章：<a href="https://juejin.cn/post/7066032710778617892" target="_blank" rel="noopener noreferrer">VSCode工作区指南：回归轻量，成为全能编辑器</a>。</p>
<p>或者说，为每个项目单独做一个<code>settings.json</code>。</p>
<p><img src="https://s2.loli.net/2022/04/25/g2l9zOxqWFnosSZ.png" alt="image-20220425143813426" loading="lazy"></p>
<p>感谢读完本篇文章，希望对你能有所帮助，如有问题欢迎各位在评论区指正。</p>
<p>创作不易，希望可以点个赞支持一下❤️❤️。</p>
<p><strong>相关参考</strong>：</p>
<ul>
<li><a href="https://ask.dcloud.net.cn/article/36286" target="_blank" rel="noopener noreferrer">当 uni-app 遇见 vscode</a></li>
<li><a href="https://uniapp.dcloud.io/worktile/" target="_blank" rel="noopener noreferrer">uni-app官方文档</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://s2.loli.net/2022/04/25/p8tFea74ZnjEsKh.png" type="image/png"/>
    </item>
    <item>
      <title>博客主页</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/home/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/home/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/rss.xml">博客主页</source>
      <pubDate>Fri, 28 Jan 2022 12:41:51 GMT</pubDate>
      <content:encoded><![CDATA[
]]></content:encoded>
    </item>
    <item>
      <title>前端基础系列：JS原型&amp;原型链详解</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/javaScript/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%EF%BC%9AJS%E5%8E%9F%E5%9E%8B&amp;%E5%8E%9F%E5%9E%8B%E9%93%BE%E8%AF%A6%E8%A7%A3/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/javaScript/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%EF%BC%9AJS%E5%8E%9F%E5%9E%8B&amp;%E5%8E%9F%E5%9E%8B%E9%93%BE%E8%AF%A6%E8%A7%A3/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/rss.xml">前端基础系列：JS原型&amp;原型链详解</source>
      <category>JavaScript</category>
      <pubDate>Sun, 27 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="开始"> 开始</h2>
<p>最近，去复习了一下原型链相关的知识，我为什么突然要去复习原型链呢，说到底还是后期学习遇到卡点了，原型链真的很重要，不仅仅是深入学习<code>JavaScript</code>，还有像<code>Vue</code>、<code>React</code>等框架多少都有用到原型链，想要学好框架，原型链一定要学好，另外，原型链在面试也是常考点，很受面试官青睐。总的来说，以前总觉得学了没什么用，现在觉得基础真的很重要。</p>
<h2 id="构造函数与原型"> 构造函数与原型</h2>
<h3 id="构造函数"> 构造函数</h3>
<p>在 <code>ES6</code>之前 ，对象不是基于类创建的，而是用一种称为构建函数的特殊函数来定义对象和它们的特征。为什么讲构造函数呢，主要是讲原型链需要，其实<code>ES6</code>当中的类可以看做语法糖，本质还是构造函数，并且我们用原型链可以更好地演示联系。</p>
<p>构造函数是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与 <code>new</code>一起使用。我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面。不过有值得注意的是：</p>
<ul>
<li>构造函数用于创建某一类对象，其首字母要<code>大写</code></li>
<li>构造函数是一个模板，可以通过<code>new</code>出来实例</li>
<li>不能写<code>return</code>语句</li>
</ul>
<p><code>new</code> 的执行过程：</p>
<ol>
<li>在内存中创建一个新的空对象</li>
<li>让 this 指向这个新的对象</li>
<li>执行构造函数里面的代码，给这个新对象添加属性和方法</li>
<li>返回这个新对象</li>
</ol>
<div><pre><code><span>// 定义了一个构造函数，不能写return</span>
<span>function</span> <span>Person</span><span>(</span><span>name<span>,</span> age</span><span>)</span><span>{</span>
  <span>this</span><span>.</span>name<span>=</span>name
  <span>this</span><span>.</span>age<span>=</span>age
  <span>this</span><span>.</span><span>show</span><span>=</span><span>function</span><span>(</span><span>)</span><span>{</span> console<span>.</span><span>log</span><span>(</span><span><span>`</span><span>我叫</span><span><span>${</span><span>this</span><span>.</span>name<span>}</span></span><span>,年龄</span><span><span>${</span><span>this</span><span>.</span>age<span>}</span></span><span>`</span></span><span>)</span> <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id="实例"> 实例</h3>
<p>由构造函数<code>new</code>出来的对象被称为实例，也叫实例对象，每一个都是独一无二的。</p>
<div><pre><code><span>const</span> p1 <span>=</span> <span>new</span> <span>Person</span><span>(</span><span>"张三"</span><span>,</span> <span>18</span><span>)</span>
<span>const</span> p2 <span>=</span> <span>new</span> <span>Person</span><span>(</span><span>"李四"</span><span>,</span> <span>20</span><span>)</span>
p1<span>.</span><span>show</span><span>(</span><span>)</span><span>// 我叫张三，年龄18</span>
console<span>.</span><span>log</span><span>(</span>p1 <span>===</span> p2<span>)</span><span>// false</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id="原型"> 原型</h3>
<p>原型有两种，一种是在构造函数上的叫<strong>显式原型</strong>：<code>prototype</code>，像上面定义的<code>Person</code>,可以通过<code>Person.prototype</code>拿到。另一种是在实例对象上的叫<strong>隐式原型</strong>：<code>__ proto__</code>，<code>p1.__proto__</code>可以拿到，需要注意的是：构造函数的<code>prototype</code>和其实例的<code>__proto__</code>是指向同一个地方的，这个地方就叫做<code>原型对象</code></p>
<div><pre><code>console<span>.</span><span>log</span><span>(</span><span>Person</span><span>.</span>prototype <span>===</span> p1<span>.</span>__proto__<span>)</span><span>// true</span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="constructor"> constructor</h3>
<p><code>prototype</code>和<code>__proto__</code>都有一个<code>constructor</code>属性，它指回构造函数本身。一般来说，如果我们采用对象赋值形式给原型对象赋值，这会覆盖构造函数原型对象原来的内容，则必须手动的利用constructor指回原来的构造函数。</p>
<div><pre><code>console<span>.</span><span>log</span><span>(</span>p1<span>.</span><span>__proto__</span><span>.</span>constructor <span>===</span> Person<span>)</span><span>// true</span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="原型链"> 原型链</h3>
<p>有了上面的基础后，我们就可以去画出Person构造函数的原型链了。<code>Person.prototype</code>也是有原型对象的，通过<code>Person.prototype.__proto__</code>拿到，再往上，<code>Person.prototype.__proto__.__proto__</code>就是<code>null</code>，此时，也就到了原型链的尽头了。</p>
<p><img src="https://s2.loli.net/2022/02/26/93aMyVlAchCJ2qU.png" alt="原型链流程图" loading="lazy"></p>
<div><pre><code>console<span>.</span><span>log</span><span>(</span><span>Person</span><span>.</span>prototype<span>.</span>__proto__ <span>===</span> <span>Object</span><span>.</span>prototype<span>)</span><span>// true</span>
console<span>.</span><span>log</span><span>(</span><span>Person</span><span>.</span>prototype<span>.</span>__proto__<span>.</span>__proto__<span>)</span><span>// null</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="javascript的成员查找机制"> JavaScript的成员查找机制</h2>
<p>原型链的一个重要体现就是JavaScript的成员查找机制。当某个实例使用了某个属性或调用了某个方法时会通过<code>__proto__的路径</code>（原型链）去链式查找，它的过程如下：</p>
<ol>
<li>当访问一个对象的属性或时，首先查找这个对象自身有没有该属性或方法</li>
<li>如果自身没有就查找它的原型，<code>__proto__</code>指向的原型对象</li>
<li>还没有就查找原型对象的原型，<code>Object</code>的原型对象</li>
<li>依此类推一直找到 为止，一直到<code>null</code></li>
</ol>
<div><pre><code><span>function</span> <span>Person</span><span>(</span><span>name<span>,</span> age</span><span>)</span> <span>{</span>
	<span>this</span><span>.</span>name <span>=</span> name
	<span>this</span><span>.</span>age <span>=</span> age
<span>}</span>
<span>Person</span><span>.</span>prototype<span>.</span>name <span>=</span> <span>"张三"</span>
<span>Person</span><span>.</span>prototype<span>.</span>sex <span>=</span> <span>"男"</span>
<span>Object</span><span>.</span>prototype<span>.</span>type <span>=</span> <span>"人"</span>

<span>const</span> p1 <span>=</span> <span>new</span> <span>Person</span><span>(</span><span>"王五"</span><span>,</span> <span>39</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>p1<span>)</span>
console<span>.</span><span>log</span><span>(</span>p1<span>.</span>name<span>)</span><span>// 王五</span>
console<span>.</span><span>log</span><span>(</span>p1<span>.</span>type<span>)</span><span>// 人</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p><img src="https://s2.loli.net/2022/02/26/QRq6atiolrIJ9W1.png" alt="image-20220226194235787" loading="lazy"></p>
<h2 id="原型继承"> 原型继承</h2>
<p>原型链还有一个重要的实践就是实现继承，在<code>ES6</code>之前，js是没有类的相关概念的，那么我们是怎么去实现继承的呢，答案就是通过原型，我们给构造函数的原型写入一些方法，可以让其子类构造函数通过原型链的方式使用到这些方法，进而达到了继承的目的。</p>
<p>接下来，我们通过构造函数方式去简单地实现一个的继承：</p>
<p>不知道<code>call()</code>或忘记了的可以去复习一下 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call" target="_blank" rel="noopener noreferrer">Function.prototype.call()</a></p>
<div><pre><code><span>function</span> <span>Father</span><span>(</span><span>name<span>,</span> age</span><span>)</span> <span>{</span>
	<span>this</span><span>.</span>name <span>=</span> name
	<span>this</span><span>.</span>age <span>=</span> age
<span>}</span>

<span>function</span> <span>Son</span><span>(</span><span>name<span>,</span> age<span>,</span> sex</span><span>)</span> <span>{</span>
	<span>Father</span><span>.</span><span>call</span><span>(</span><span>this</span><span>,</span> name<span>,</span> age<span>)</span>
	<span>this</span><span>.</span>sex <span>=</span> sex
<span>}</span>

<span>const</span> s1 <span>=</span> <span>new</span> <span>Son</span><span>(</span><span>"张三"</span><span>,</span> <span>17</span><span>,</span> <span>"男"</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>s1<span>)</span>
console<span>.</span><span>log</span><span>(</span>s1<span>.</span>name<span>)</span><span>// 张三</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>在上面的代码基础上，我们再去实现方法的继承</p>
<div><pre><code><span>Father</span><span>.</span>prototype<span>.</span><span>money</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
	console<span>.</span><span>log</span><span>(</span><span>"挣钱"</span><span>)</span><span>// 父类的方法</span>
<span>}</span>
<span>Son</span><span>.</span>prototype <span>=</span> <span>new</span> <span>Father</span><span>(</span><span>)</span><span>// 此时constructor指向已经改了</span>
<span>Son</span><span>.</span>prototype<span>.</span>constructor <span>=</span> Son<span>// 我们要改回来</span>

<span>Son</span><span>.</span>prototype<span>.</span><span>study</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
	console<span>.</span><span>log</span><span>(</span><span>"学习"</span><span>)</span><span>// 子类自己的方法</span>
<span>}</span>


<span>const</span> s2 <span>=</span> <span>new</span> <span>Son</span><span>(</span><span>"李四"</span><span>,</span> <span>27</span><span>,</span> <span>"女"</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>s2<span>)</span>
s2<span>.</span><span>money</span><span>(</span><span>)</span><span>// 挣钱</span>
s2<span>.</span><span>study</span><span>(</span><span>)</span><span>// 学习</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><blockquote>
<p><strong>注意</strong>：上面的代码执行顺序不能随意更改，否则会出错，这原理也比较好理解，自己可以去思考一下为什么。</p>
</blockquote>
<p>到此，我们就已经实现了属性和方法的继承，可以看得出来，实现还是比较麻烦的。但随着<code>ES6</code>的普及，我们很少会再用构造函数去实现继承了，相比于构造函数，类去实现继承可谓是相当简单了，但为了去更好地去讲解原型链，理解原理，我们还是选择了构造函数。</p>
<h2 id="结语"> 结语</h2>
<p>感谢读完本篇文章，希望对你有所帮助，如有错误还请各位指正❤️❤️。</p>
]]></content:encoded>
      <enclosure url="https://s2.loli.net/2022/02/26/93aMyVlAchCJ2qU.png" type="image/png"/>
    </item>
    <item>
      <title>一个小工具，让uni-app也能使用iconfont多色图标</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/mp/%E4%B8%80%E4%B8%AA%E5%B0%8F%E5%B7%A5%E5%85%B7%EF%BC%8C%E8%AE%A9uni-app%E4%BD%BF%E7%94%A8iconfont%E5%A4%9A%E8%89%B2%E5%9B%BE%E6%A0%87/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/mp/%E4%B8%80%E4%B8%AA%E5%B0%8F%E5%B7%A5%E5%85%B7%EF%BC%8C%E8%AE%A9uni-app%E4%BD%BF%E7%94%A8iconfont%E5%A4%9A%E8%89%B2%E5%9B%BE%E6%A0%87/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/rss.xml">一个小工具，让uni-app也能使用iconfont多色图标</source>
      <category>小程序</category>
      <pubDate>Sun, 27 Mar 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="开始"> 开始</h2>
<p>对于一个前端攻城狮，没有<code>UI</code>，单独去做一个项目并且保证页面的美观是非常令人头疼的，有时候光是想<strong>页面的设计</strong>和寻找<strong>设计资源</strong>比自己写代码的时间还长，而且还难找。</p>
<p>影响页面的美观因素有很多，我想一套美观优雅的<strong>字体图标</strong>是非常提升页面的逼格的。</p>
<p>而且字体图标使用非常方便，不需要像图片那样，把图片放到项目，然后引用路径。对于学习前端的人单独去做项目真的很适合，<strong>而且图标库拥有海量的图标，总能找到自己想要的，设计成本很低</strong>，相比于瞎找网络上的图片，还带水印，还难找真的太省事了。真就是一个设计库。</p>
<h2 id="iconfont的单色图标和多色图标"> iconfont的单色图标和多色图标</h2>
<p>简单的说一下<code>iconfont</code>阿里巴巴矢量图标库。<code>iconfont</code>是功能很强大且图标内容很丰富的矢量图标库，主要还是国内的，访问快，中文支持友好，有庞大的用户群体。</p>
<p>不同于其他的图标库，<code>iconfont</code>不仅仅支持传统的单色图标，还有<strong>多色图标</strong>，并且<code>多色图标</code>已经到达了一个数量级，选择非常的多，美观且优雅。可以看一下<strong>单色图标</strong>和<strong>多色图标</strong>的对比。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e524dd626d741a1b28872c3d39e95ff~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220327124059249" loading="lazy"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bce17b7145e24f3b98f09b69a2059eec~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220327124138807" loading="lazy"></p>
<p><code>iconfont</code>有三种引用方式<code>unicode</code>、<code>font-class</code>、<code>symbol</code>使用图标，多色图标对应的就是<code>symbol</code>引用，可以看一下官方对此的描述：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/62b5784412154f7fbb0485a2c82040eb~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220327130156993" loading="lazy"></p>
<p>详细的可以看一下官方的教程<a href="https://www.iconfont.cn/help/detail?spm=a313x.7781069.1998910419.d8d11a391&amp;helptype=code" target="_blank" rel="noopener noreferrer">使用帮助</a></p>
<p>但是我们会发现，官方只是说了一下<code>web端</code>的使用，并没有说<code>小程序</code>怎么使用<strong>多色图标</strong>，难道小程序就不能使用<code>多色图标</code>了吗？<strong>其实是可以的</strong>，接下了我会详细说说如何在<code>uni-app</code>使用<strong>iconfont多色图标</strong>。</p>
<h2 id="iconfont-tools的使用"> iconfont-tools的使用</h2>
<p>我们要把原始<code>iconfont多色图标</code>变成<code>uni-app</code>可使用的图标要可以分为以下步骤：</p>
<ol>
<li>把项目中的图标库下载到本地</li>
<li>下载<code>iconfont-tools</code>包</li>
<li>用<code>iconfont-tools</code>转化<code>多色图标</code></li>
</ol>
<h3 id="下载图标库"> 下载图标库</h3>
<p>如何创建一个项目，把图标加进项目就不多说了。我们把下载的图标解压出来，然后进入字体文件目录。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c1caab7a3aa74962a593e987d44d7f08~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220327131730998" loading="lazy"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5eaab89c616a480b8b71a3f969ab192a~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220327132125560" loading="lazy"></p>
<h3 id="安装iconfont-tools包"> 安装iconfont-tools包</h3>
<p>这是很关键的一步，这个工具可以把我们下载<code>多色图标</code>转化成<code>uni-app</code>可使用的图标库，建议全局安装这个包。</p>
<div><pre><code><span>npm</span> <span>install</span> -g iconfont-tools
</code></pre>
<div><span>1</span><br></div></div><p>安装好这个包后，我们在下载的字体文件目录打开<code>cmd</code>，然后执行这个命令，<strong>很重要的一步，不要搞错了文件夹目录</strong>。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f095733cb94b4f1ebf1461ec39cd8df1~tplv-k3u1fbpfcp-zoom-1.image" alt="1" loading="lazy"></p>
<h3 id="执行命令"> 执行命令</h3>
<p>然后会出现几个提示，自己可以根据需要去更改，我们这里直接一路回车，选择默认就好。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5f58491262074c26b8d4373f79d6f7f4~tplv-k3u1fbpfcp-zoom-1.image" alt="2" loading="lazy"></p>
<p>然后，我们就转化好了，可以去看一下生成定的<code>iconfont-weapp</code>目录。</p>
<h2 id="在uni-app中使用iconfont多色图标"> 在uni-app中使用iconfont多色图标</h2>
<p>在<code>uni-app</code>使用这些<code>多色图标</code>，只需要用到<code>iconfont-weapp-icon.css</code>这个文件，然后我们把这个文件放到到<code>uni-app</code>项目中去。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e6c29195d27244368ccb7ae8bf5dfff0~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220327134723684" loading="lazy"></p>
<p>然后在<code>App.vue</code>中引入这个文件：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c0f9b016ffad4f3896db2b412c832868~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220327135527059" loading="lazy"></p>
<p>然后我们就可以在项目中使用它了，使用是添加类名，一个是通用类名<code>t-icon</code>，还有一个是单个图标专属类名，使用方法跟<code>font-class</code>差不多。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5665f604aa434e90a6b32af543ae7a62~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220327135811785" loading="lazy"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ca04e6da8ab43d7bff4f038629dc673~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220327135843981" loading="lazy"></p>
<p><strong>多色图标</strong>是彩色的，这难道不比<strong>单色图标</strong>有逼格。</p>
<h2 id="更改多色图标的样式"> 更改多色图标的样式</h2>
<p>我们看看<code>iconfont-weapp-icon.css</code>都有些什么</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da7728b3832b4ed8a54651a053e2097c~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220327140502530" loading="lazy"></p>
<p>我们可以通过更改<strong>通用类名</strong>去更改图标的默认样式。然后，我们怎么根据需要单独更改某一个图标呢？</p>
<p>我们可以在使用的地方给类名添加样式从而去<strong>覆盖</strong>默认样式，并且不同于<strong>单色图标</strong>，多色图标更改大小是通过<code>width</code>和<code>height</code>更改的，因为图标是<strong>正方形</strong>，我们也要保证<code>width</code>和<code>height</code>相同。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/49cf504db6d4402eb3d738037a0a1932~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220327141414180" loading="lazy"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b179f2f0e394ff6aab1d57a8b2038cc~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220327141450859" loading="lazy"></p>
<h2 id="结语"> 结语</h2>
<p>最后，再放放我收藏的<strong>iconfont多色图标库</strong>吧：</p>
<ul>
<li>
<p><a href="https://www.iconfont.cn/collections/detail?cid=35099" target="_blank" rel="noopener noreferrer">小假哥_多彩_icon083</a></p>
</li>
<li>
<p><a href="https://www.iconfont.cn/collections/detail?cid=35319" target="_blank" rel="noopener noreferrer">小假哥_多彩_icon086</a></p>
</li>
<li>
<p><a href="https://www.iconfont.cn/collections/detail?cid=35934" target="_blank" rel="noopener noreferrer">文件类型</a></p>
</li>
<li>
<p><a href="https://www.iconfont.cn/collections/detail?cid=38628" target="_blank" rel="noopener noreferrer">001 个人页icon</a></p>
</li>
<li>
<p><a href="https://www.iconfont.cn/collections/detail?cid=37776" target="_blank" rel="noopener noreferrer">猫咪图标</a></p>
</li>
</ul>
<p>感谢读完本篇文章，希望对你能有所帮助，如有问题欢迎各位在评论区指正。</p>
<p>创作不易，希望点个赞支持一下❤️❤️。</p>
]]></content:encoded>
      <enclosure url="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e524dd626d741a1b28872c3d39e95ff~tplv-k3u1fbpfcp-zoom-1.image" type="image/"/>
    </item>
    <item>
      <title>2022年，VSCode插件推荐和基本使用（前端小白必看，超详细）</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vscode/2022%E5%B9%B4%EF%BC%8CVSCode%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90%E5%92%8C%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vscode/2022%E5%B9%B4%EF%BC%8CVSCode%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90%E5%92%8C%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/rss.xml">2022年，VSCode插件推荐和基本使用（前端小白必看，超详细）</source>
      <category>VSCode</category>
      <pubDate>Fri, 21 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="前言"> 前言</h1>
<p>学习前端也有一年多了，VSCode作为我的主力开发工具，从中我接触过许许多多的插件还有一些配置。对此我想写篇文章去介绍vscode 的插件和一些使用。希望可以给刚入坑前端的小伙伴一些帮助。本文很长，如果能认真看完，你一定会有所收获。</p>
<h1 id="_2022年-vscode常用插件推荐"> 2022年，VSCode常用插件推荐</h1>
<p><strong>工欲善其事，必先利其器</strong>。本文介绍一些前端入门级插件，这些插件作者都有用到过，我会去对比同类插件、插件是否有在长期维护去综合推荐，我也不想增加心理负担，推荐的都是非常基本却又非常实用的插件。</p>
<blockquote>
<p><code>提示</code>：这些插件主要以<strong>前端</strong>这块来讲，并且<strong>不涉及</strong>像<code>vue</code>,<code>react</code>等框架的一些插件，同时也不会讲<code>c++</code>,<code>python</code>等。</p>
</blockquote>
<h2 id="插件清单"> 插件清单</h2>
<ol>
<li>Chinese (Simplified) (简体中文)</li>
<li>Auto Rename Tag</li>
<li>open in browser</li>
<li>Prettier - Code formatter</li>
<li>Live Server</li>
<li>Path Intellisense</li>
<li>Image preview</li>
<li>Code Spell Checker</li>
<li>Better Comments</li>
<li>CodeSnap</li>
<li>Easy LESS</li>
<li>Sass</li>
<li>Live Sass Compiler</li>
<li>jQuery Code Snippets</li>
<li>14.JavaScript (ES6) code snippets</li>
<li>One Dark Pro</li>
<li>Material Theme</li>
<li>Tokyo Night</li>
<li>Material Icon Theme</li>
<li>vscode-icons</li>
</ol>
<h2 id="_01-实用扩展推荐"> 01- 实用扩展推荐</h2>
<h3 id="_1-chinese-simplified-简体中文"> 1.Chinese (Simplified) (简体中文)</h3>
<p>适用于 VS Code 的中文（简体）语言包。</p>
<p>不用多说，英语不太好的小伙伴必装的汉化插件，英语好的可以略过。</p>
<p><img src="https://pic.imgdb.cn/item/61e959652ab3f51d918b0ef9.jpg" alt="image-20220119212543711" loading="lazy"></p>
<h3 id="_2-auto-rename-tag"> 2.Auto Rename Tag</h3>
<p>同步修改 <code>HTML</code>/<code>XML</code>标签。</p>
<p><img src="https://pic.imgdb.cn/item/61e959962ab3f51d918b48b2.jpg" alt="" loading="lazy"></p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/af2935040f6d43c98600ecb7b8e23129~tplv-k3u1fbpfcp-watermark.image?" alt="01.gif" loading="lazy"></p>
<h3 id="_3-open-in-browser"> 3.open in browser</h3>
<p>提供右键菜单选项，一键在浏览器打开<code>html</code>文件。</p>
<p><img src="https://pic.imgdb.cn/item/61e95aa52ab3f51d918c5fa5.jpg" alt="" loading="lazy"></p>
<p>可以选择在默认浏览器打开或者选择自己想用的浏览器打开。</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ecd967b38bf941ed8bf5ce2df982af7b~tplv-k3u1fbpfcp-watermark.image?" alt="02.gif" loading="lazy"></p>
<h3 id="_4-prettier-code-formatter"> 4.Prettier - Code formatter</h3>
<p>最流行的前端代码格式化利器。</p>
<p><img src="https://pic.imgdb.cn/item/61e95ac62ab3f51d918c7cc8.jpg" alt="" loading="lazy"></p>
<p>在设置中把在保存时格式化文件勾上，就可以<code>ctrl+s</code>保存后格式化文件，不管写的再乱，代码都能变得整齐划一。我们也可以根据自己的喜好，配置相关的的设置，比如缩进，前端的话像<code>html</code>,<code>css</code>,<code>js</code>等都建议缩进两个单位。</p>
<p><img src="https://pic.imgdb.cn/item/61e96ccf2ab3f51d919f7057.jpg" alt="" loading="lazy"></p>
<p><img src="https://s2.loli.net/2022/04/18/LuegSYUxDXm7o8Q.gif" alt="2" loading="lazy"></p>
<p>这是一些常用的配置，记住放在<code>settings.json</code>最外的大括号里。</p>
<div><pre><code><span>"prettier.printWidth"</span><span>:</span> <span>120</span><span>,</span><span>,</span><span>// 最大换行长度</span>
<span>"prettier.tabWidth"</span><span>:</span> <span>2</span><span>,</span> <span>// 保存后缩进单位</span>
<span>"[html][css][less][scss][javascript][typescript][json][jsonc]"</span><span>:</span> <span>{</span>
    <span>"editor.defaultFormatter"</span><span>:</span> <span>"esbenp.prettier-vscode"</span><span>,</span><span>//设置prettier为默认格式化程序</span>
    <span>"editor.tabSize"</span><span>:</span> <span>2</span><span>// 编辑时缩进单位</span>
  <span>}</span><span>,</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id="_5-live-server"> 5.Live Server</h3>
<p>开启一个实时的本地服务器。</p>
<p><img src="https://pic.imgdb.cn/item/61e95b0c2ab3f51d918cc718.jpg" alt="" loading="lazy"></p>
<p>一个非常好用的插件，相比于<code>open in browser</code>每次保存文件后到浏览器都要刷新才能看到最新的变化，有了这个插件，就可以实时监听文件的变化，自动刷新。真的非常推荐刚开始学<code>html</code>，<code>css</code>，<code>js</code>的同学使用这个插件学习，很方便。</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d9bdd311be3c472c840cdbc2208578ae~tplv-k3u1fbpfcp-watermark.image?" alt="03.gif" loading="lazy"></p>
<h3 id="_6-path-intellisense"> 6.Path Intellisense</h3>
<p>智能路径补全。</p>
<p>之前这个插件好久都没人维护，但最近的一段时间，经常可以看到插件的更新，体验还是不错的，也可以试试同类的插件<code>Path Autocomplete</code>。</p>
<p>其实VSCode对大部分都是有路径感知的，这个插件的一个比较好的功能是<strong>配置路径别名</strong>，以后用框架写项目的时候用的会比较多。</p>
<p><img src="https://pic.imgdb.cn/item/61e95b282ab3f51d918ce192.jpg" alt="" loading="lazy"></p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8b56042dbec40f0bbfce05dd53991ae~tplv-k3u1fbpfcp-watermark.image?" alt="04.gif" loading="lazy"></p>
<div><pre><code><span>"path-intellisense.extensionOnImport"</span><span>:</span> <span>true</span><span>,</span> <span>// 保留文件扩展名</span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="_7-image-preview"> 7.Image preview</h3>
<p>鼠标悬停可以预览图片。</p>
<p>鼠标悬停可以预览图片，显示图片的大小和尺寸。不仅仅在<code>css</code>中，也可以在<code>js</code>、<code>vue</code>等文件中预览哦，而且还能预览<code>url</code>网络上的图片，可以打开对应的文件夹和项目文件为位置，真的强烈推荐！</p>
<p><img src="https://pic.imgdb.cn/item/61e95b462ab3f51d918cfb62.jpg" alt="" loading="lazy"></p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f647da074bf46e9bf92408bd528cd72~tplv-k3u1fbpfcp-watermark.image?" alt="05.gif" loading="lazy"></p>
<div><pre><code><span>"gutterpreview.showImagePreviewOnGutter"</span><span>:</span> <span>false</span><span>,</span><span>// 关闭在行号中显示缩列图</span>
</code></pre>
<div><span>1</span><br></div></div><h3 id="_8-code-spell-checker"> 8.Code Spell Checker</h3>
<p>一个基本的拼写检查器，可以很好地与驼峰大小写代码配合使用。</p>
<p><img src="https://pic.imgdb.cn/item/61e95b6f2ab3f51d918d22cb.jpg" alt="" loading="lazy"></p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab345c3e410f4367a57f17afa3aa0850~tplv-k3u1fbpfcp-watermark.image?" alt="06.gif" loading="lazy"></p>
<h3 id="_9-better-comments"> 9.Better Comments</h3>
<p>写出更个性化的注释。</p>
<p><img src="https://pic.imgdb.cn/item/61e95b912ab3f51d918d3fe3.jpg" alt="" loading="lazy"></p>
<p><img src="https://pic.imgdb.cn/item/61e968e22ab3f51d919b3c64.jpg" alt="" loading="lazy"></p>
<h3 id="_10-codesnap"> 10.CodeSnap</h3>
<p>可以一键生成精美的代码截图，放大也不会模糊，嫌截屏软件生成的代码截图太难看，可以试试这个插件。生成的代码主题都是依自己的主题的哦。</p>
<p><img src="https://s2.loli.net/2022/04/19/qbHQcDM3U9p7hjC.png" alt="image-20220419122739106" loading="lazy"></p>
<p><img src="https://s2.loli.net/2022/04/19/Qsz2iv6SrDCVNEF.gif" alt="4" loading="lazy"></p>
<h3 id="_11-easy-less"> 11.Easy LESS</h3>
<p>实时编译<code>less</code>到<code>css</code>。</p>
<p><img src="https://pic.imgdb.cn/item/61e95bb92ab3f51d918d6712.jpg" alt="" loading="lazy"></p>
<h3 id="_12-sass"> 12.Sass</h3>
<p>提供对<strong>sass/scss</strong>文件的支持，代码高亮、语法检查，写<code>sass</code>/<code>scss</code>文件必装的插件。</p>
<p><img src="https://pic.imgdb.cn/item/61e95bd82ab3f51d918d84c8.jpg" alt="" loading="lazy"></p>
<h3 id="_13-live-sass-compiler"> 13.Live Sass Compiler</h3>
<p>实时编译<code>sass</code>/<code>scss</code>到<code>css</code></p>
<p><img src="https://pic.imgdb.cn/item/61e95bf02ab3f51d918d9be3.jpg" alt="" loading="lazy"></p>
<h3 id="_14-jquery-code-snippets"> 14.jQuery Code Snippets</h3>
<p><code>jquery</code>代码提示，拥有许多<code>jquery</code>相关的<strong>api</strong>和<strong>代码块</strong>提示，如果有在学<code>jquery</code>的小伙伴，建议装一个。</p>
<p><img src="https://pic.imgdb.cn/item/61e95c132ab3f51d918dc010.jpg" alt="" loading="lazy"></p>
<h3 id="_15-javascript-es6-code-snippets"> 15.JavaScript (ES6) code snippets</h3>
<p><code>es6</code>等代码块，语法提示</p>
<p><img src="https://pic.imgdb.cn/item/61e95c362ab3f51d918de5f0.jpg" alt="" loading="lazy"></p>
<p><img src="https://s2.loli.net/2022/04/19/6XlMGLYBEKH3edn.png" alt="image-20220419123712108" loading="lazy"></p>
<h2 id="_02-外观美化插件推荐"> 02-外观美化插件推荐</h2>
<h3 id="主题插件"> 主题插件</h3>
<p><strong>One Dark Pro</strong>，最受欢迎的暗黑主题，也是VSCode中下载量最高的主题。<img src="https://pic.imgdb.cn/item/61e95c712ab3f51d918e213f.jpg" alt="" loading="lazy"></p>
<p><strong>Material Theme</strong>，拥有非常多的主题，每个都很好看，也是有名的主题插件。<img src="https://pic.imgdb.cn/item/61e95cf32ab3f51d918ec0b8.jpg" alt="" loading="lazy"></p>
<p><strong>Tokyo Night</strong>，本人在用的一款主题，特别喜欢，不刺眼，颜色很好看。<img src="https://pic.imgdb.cn/item/61e95d152ab3f51d918ee15a.jpg" alt="" loading="lazy"></p>
<h3 id="文件图标"> 文件图标</h3>
<p><strong>Material Icon Theme</strong>，拥有超多的文件图标，下载量也是最高。
<img src="https://pic.imgdb.cn/item/61e95d362ab3f51d918eff6c.jpg" alt="" loading="lazy"></p>
<p><strong>vscode-icons</strong>，VSCode官方的文件图标，也相当的好看。
<img src="https://pic.imgdb.cn/item/61e95d5a2ab3f51d918f2786.jpg" alt="" loading="lazy"></p>
<h3 id="如何去寻找主题插件"> 如何去寻找主题插件</h3>
<p>之前看到有人直接搜索<code>theme</code>找主题插件，其实这样是不太正确的，因为并不是所有主题主题插件名字都带有<strong>theme</strong>，正确的方式应该去按类别去查找。VSCode有个插件类别叫<code>theme</code>，这就是主题类插件。</p>
<p>搜索出来后，也可以看到已经按下载量进行了排行，很直观的看到各个主题的下载量。</p>
<p><img src="https://s2.loli.net/2022/04/19/HRT4hDVc8KMqSip.gif" alt="3" loading="lazy"></p>
<h1 id="vscode常用快捷键"> VSCode常用快捷键</h1>
<blockquote>
<p><strong>VSCode</strong>内置很多快捷键，可以大大的提高我们的开发效率。</p>
<p><code>提示</code>：这个快捷键都是可以自定义的，但用好默认的内置快捷键就足够胜任我们日常大部分开发了。</p>
</blockquote>
<p>这里推荐<strong>黑马前端pink老师</strong> VSCode快捷键-以及使用技巧  https://www.bilibili.com/read/cv9699783</p>
<h1 id="vscode一些好用的配置"> VSCode一些好用的配置</h1>
<h2 id="彩虹括号"> 彩虹括号</h2>
<p>以前我们实现彩虹括号可能会用上一个插件叫<a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2" target="_blank" rel="noopener noreferrer">Bracket Pair Colorizer 2</a>，但是有着性能问题，着色慢。vscode在2021 年 8 月（<code>1.60</code> 版）开始内置了这个功能，随之到来的还有垂直连线，亲测，现在已经非常好用了，效果出色，并且所有颜色都是可主题化的，最多可以配置六种颜色。</p>
<p><img src="https://pic.imgdb.cn/item/61e97ac02ab3f51d91af5ced.jpg" alt="" loading="lazy"></p>
<p>在如下打开<code>settings.json</code>，记住放在最外层的大括号里。</p>
<p><img src="https://pic.imgdb.cn/item/61e97baf2ab3f51d91b07b96.jpg" alt="" loading="lazy"></p>
<p><img src="https://pic.imgdb.cn/item/61e97ca12ab3f51d91b1962b.jpg" alt="" loading="lazy"></p>
<p>这是我认为比较好的配置，详细的配置可以参考<a href="https://code.visualstudio.com/updates/v1_60#_high-performance-bracket-pair-colorization" target="_blank" rel="noopener noreferrer">vscode官方文档</a>。</p>
<div><pre><code> <span>"editor.bracketPairColorization.enabled"</span><span>:</span> <span>true</span><span>,</span>
 <span>"editor.guides.bracketPairs"</span><span>:</span> <span>"active"</span><span>,</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="javascript参数名称提示"> JavaScript参数名称提示</h2>
<p>VSCode在2021 年 8 月（<code>1.60</code> 版）中加入<a href="https://code.visualstudio.com/updates/v1_60#_inlay-hints-for-javascript-and-typescript" target="_blank" rel="noopener noreferrer">JavaScript/TypeScript 嵌入提示参数名称和类型的内联提示</a>等，此设置不会自动打开，也就是说也是需要我们手动去配置的。这些提示可以简单的帮助我们做一些错误检查，同时也让代码更直观、好看。</p>
<p><img src="https://pic.imgdb.cn/item/61e973fb2ab3f51d91a7785e.jpg" alt="" loading="lazy"></p>
<p>这是我的一些配置，详细的配置说明可以参考<a href="https://code.visualstudio.com/updates/v1_60#_inlay-hints-for-javascript-and-typescript" target="_blank" rel="noopener noreferrer">vscode官方文档</a>。</p>
<div><pre><code>  <span>"javascript.inlayHints.parameterNames.enabled"</span><span>:</span> <span>"all"</span><span>,</span>
  <span>"javascript.inlayHints.variableTypes.enabled"</span><span>:</span> <span>false</span><span>,</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><blockquote>
<p>至此，本文结束。创作不易，本人第一次写博客，如果本篇文章对你有所帮助，希望可以点个赞，给个关注。</p>
</blockquote>
]]></content:encoded>
      <enclosure url="https://pic.imgdb.cn/item/61e959652ab3f51d918b0ef9.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>夜神模拟器刷步道乐跑，步数不为0</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/university/%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%88%B7%E6%AD%A5%E9%81%93%E4%B9%90%E8%B7%91%EF%BC%8C%E6%AD%A5%E6%95%B0%E4%B8%8D%E4%B8%BA0/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/university/%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%88%B7%E6%AD%A5%E9%81%93%E4%B9%90%E8%B7%91%EF%BC%8C%E6%AD%A5%E6%95%B0%E4%B8%8D%E4%B8%BA0/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/rss.xml">夜神模拟器刷步道乐跑，步数不为0</source>
      <category>大学</category>
      <pubDate>Sat, 05 Mar 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="下载夜神模拟器"> 下载夜神模拟器</h2>
<p>去夜神模拟器官网下载模拟器<a href="https://www.yeshen.com/" target="_blank" rel="noopener noreferrer">夜神模拟器官方</a></p>
<p><img src="https://s2.loli.net/2022/03/05/k7SOylZbaewjG3H.png" alt="image-20220305123719087" loading="lazy"></p>
<p>安装好夜神模拟器后，下载<code>微信</code>和<code>步道乐跑</code>，一定要下载<code>微信</code>，因为你用的是微信登录的，学校的一般都用微信，如果你用的<code>QQ</code>，那么就下载<code>QQ</code>，要下载，不然没法登陆，我这里已经下载好了。</p>
<p><img src="https://s2.loli.net/2022/03/05/K5jsDPGvqrocbRV.png" alt="image-20220305124141593" loading="lazy"></p>
<p>然后就是登陆微信，登陆步道乐跑</p>
<p><img src="https://s2.loli.net/2022/03/05/eqmAy4rlO7QZxR2.png" alt="image-20220305124324952" loading="lazy"></p>
<h2 id="设置定位"> 设置定位</h2>
<p>一个重要的点，就是要设置定位，他默认好像是北京...，我们自己搜索自己的学校，定位到当前就行了。</p>
<p><img src="https://s2.loli.net/2022/03/05/H2o6cEqWtrF1em8.png" alt="image-20220305131014961" loading="lazy"></p>
<h2 id="模拟行走"> 模拟行走</h2>
<p>夜神模拟器不同于其他模拟器的是它有<code>模拟行走的功能</code>，其他模拟器刷<code>步道乐跑</code>都是用鼠标改定位，而夜神模拟器可以像玩游戏一样，<code>W</code>,<code>A</code>,<code>S</code>,<code>D</code>上下左右行走，<code>Q</code>和<code>E</code>可以控制速度，不要太快哦。步道乐跑是要打卡三个点的，我们就可以自己控制去哪里。</p>
<p><img src="https://s2.loli.net/2022/03/05/omOQzgyW3BD2jbC.gif" alt="8" loading="lazy"></p>
<h2 id="步数脚本"> 步数脚本</h2>
<p>我们在上面的教学之后，其实是有一个严重的问题的，就是<code>步数为0</code>，有的学校不会管这个，成绩好像也是有效的，但为了更保险，我们要去整出个步数了。</p>
<p>怎么才有步数呢，就是夜神模拟器中的摇一摇，摇一下，步数为一，但自己手摇也太累了吧，所以我们要引入一个脚本，夜神论坛有个现成的<a href="https://www.yeshen.com/blog/wp-content/uploads/2022/02/%E6%AD%A5%E9%A2%91%E8%84%9A%E6%9C%AC.7z" target="_blank" rel="noopener noreferrer">步数脚本</a>，下载下来，不要解压，我们导入的时候<code>就是导入压缩包</code>，成功后就会有一个操作录制的列表。</p>
<p><img src="https://s2.loli.net/2022/03/05/pwCxLcY7ZH1edF5.png" alt="image-20220305130335981" loading="lazy"></p>
<p>刚刚那个就是我们导入的脚本，其实这个脚本就是自动<code>摇一摇</code>，代替我们手动摇一摇，这样的话，我们就有步数了。</p>
<p><img src="https://s2.loli.net/2022/03/05/TCSUlc5mpHNBxYn.gif" alt="9" loading="lazy"></p>
<p>跑完后，我们可以就检查下，是否有效成绩，进入详情页后，我们也可以看到有<code>步数</code>，我试了下，正常跑也才<code>两千多步</code>，它自己也说步频数据仅供参考，至少我们的步数不是<code>0</code>了。</p>
<p><img src="https://s2.loli.net/2022/03/05/J3oiRLdW2tKGhwm.png" alt="image-20220305131130686" loading="lazy"></p>
<h2 id="最后"> 最后</h2>
<p>脚本虽好，可不要贪杯哦，多跑跑步也是不错的，如有问题欢迎在评论区提问❤️❤️。</p>
]]></content:encoded>
      <enclosure url="https://s2.loli.net/2022/03/05/k7SOylZbaewjG3H.png" type="image/png"/>
    </item>
    <item>
      <title>谈谈uni-app中rpx单位和px单位的转换</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/mp/%E8%B0%88%E8%B0%88uni-app%E4%B8%ADrpx%E5%8D%95%E4%BD%8D%E5%92%8Cpx%E5%8D%95%E4%BD%8D%E7%9A%84%E8%BD%AC%E6%8D%A2/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/mp/%E8%B0%88%E8%B0%88uni-app%E4%B8%ADrpx%E5%8D%95%E4%BD%8D%E5%92%8Cpx%E5%8D%95%E4%BD%8D%E7%9A%84%E8%BD%AC%E6%8D%A2/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/rss.xml">谈谈uni-app中rpx单位和px单位的转换</source>
      <category>小程序</category>
      <pubDate>Wed, 06 Apr 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="rpx单位的由来"> rpx单位的由来</h2>
<p><code>rpx</code>单位最初由微信推出，它与我们常用<code>px</code>一个很大的区别就是<strong>具有响应式</strong>，可以参考一下我们学<code>web开发</code>时用的<code>rem</code>、<code>vw</code>、<code>vh</code>等单位，再看看<strong>微信官方文档</strong>对此的描述：</p>
<p><strong>rpx（responsive pixel）</strong>: 可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素。</p>
<p>随着智能手机的发展，手机屏幕也越来越怪，不再是以前的<strong>16:9</strong>，屏幕也是各种大小，这也更需要前端去做<strong>响应式</strong>、<strong>自适应</strong>来适配不同设备。所以也就会有像<code>rpx</code>这种响应式的单位出现。</p>
<p><code>uni-app</code>之前是使用<code>upx</code>，后面也是改用了<code>rpx</code>，做了统一，详细的可以看看官方的公告：<a href="https://ask.dcloud.net.cn/article/36130" target="_blank" rel="noopener noreferrer">推荐使用rpx替代upx的公告</a>。</p>
<h2 id="为什么要去转换单位"> 为什么要去转换单位</h2>
<p>有人要问了，项目直接全用<code>rpx</code>单位就行了，为什么还要去转换单位呢？</p>
<p>其实这也是迫不得已，有些场景还是会有<code>px</code>单位的出现，比如说，调用<code>uni-app</code>中的<code>uni.getSystemInfoS	ync(OBJECT)</code>，这个api就是拿设备的信息的，可以拿到像我们常用的<strong>可使用窗口高度</strong><code>windowHeight</code>，屏幕宽高<code>screenWidth</code>、<code>screenHeight</code>等。拿到的是一个<strong>数值</strong>，它用的就是<strong>px单位</strong></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/be961912453145489585042b178c6606~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220405200845819" loading="lazy"></p>
<p>像我们为了自定义导航栏，去动态地算导航栏的高度，拿回来的也是<code>px</code>单位的数值，但项目中用的是<code>rpx</code>，这难免要有<strong>px数值和rpx数值之间的计算</strong>，还有就是我们用的组件库，它的很多默认样式或设置都是<code>px</code>单位的数值，这个我们后面会说。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/df9d3b345ae44fedaf923b0f2fbc0d18~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220405212957564" loading="lazy"></p>
<h2 id="单位转换公式"> 单位转换公式</h2>
<p>说了这么一大堆，我们再来看看<code>rpx</code>和<code>px</code>有什么关系。</p>
<p><code>rpx</code>单位规定如果在<strong>iPhone6</strong>下，也就是屏幕宽度<strong>375px</strong>，则</p>
<ul>
<li>750rpx = 375px = 750物理像素</li>
<li>1rpx = 0.5px = 1物理像素</li>
</ul>
<p>这也是很多人推荐用<strong>iphone6</strong>模拟开发的原因之一，单位转换很直观，就是<strong>2:1</strong>，但是不是在所有设备上都是<strong>2:1</strong>呢？曾经我也是怎么认为的，然后老出bug.....，其实这是有转化公式的，不是简简单单的<strong>2:1</strong>。</p>
<p>总的来说，还是以<code>750</code>这个物理像素为基准</p>
<ul>
<li><strong><code>px / rpx = screenWidth / 750</code></strong></li>
</ul>
<p>然后我们就可以推出：</p>
<ul>
<li>
<p><strong><code>rpx = (750 * px) / screenWidth</code></strong></p>
</li>
<li>
<p><strong><code>px = (screenWidth * rpx) / 750</code></strong></p>
</li>
</ul>
<div><pre><code><span>// rpx转px</span>
<span>rpxToPx</span><span>(</span><span>rpx</span><span>)</span> <span>{</span>
  <span>const</span> screenWidth <span>=</span> uni<span>.</span><span>getSystemInfoSync</span><span>(</span><span>)</span><span>.</span>screenWidth
  <span>return</span> <span>(</span>screenWidth <span>*</span> Number<span>.</span><span>parseInt</span><span>(</span>rpx<span>)</span><span>)</span> <span>/</span> <span>750</span>
<span>}</span>

<span>// px转rpx</span>
<span>pxToRpx</span><span>(</span><span>px</span><span>)</span> <span>{</span>
  <span>const</span> screenWidth <span>=</span> uni<span>.</span><span>getSystemInfoSync</span><span>(</span><span>)</span><span>.</span>screenWidth
  <span>return</span> <span>(</span><span>750</span> <span>*</span> Number<span>.</span><span>parseInt</span><span>(</span>px<span>)</span><span>)</span> <span>/</span> screenWidth
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id="uview中的单位转换问题"> uView中的单位转换问题</h2>
<p><code>uView</code>这个组件库有不少的坑，有一个就是单位问题，<code>uView</code>中的很多<strong>配置</strong>都是<code>px</code>单位的，这跟我们项目中<code>rpx</code>难免就会不协调，举个例子：像<code>u-icon</code>这个图标组件，他有个配置项可以设置大小，但是只能设置<code>px</code>单位。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1812ce2ca08b4d4ab443412bfa8a8379~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220405210128918" loading="lazy"></p>
<p>这是在<code>iPad</code>模拟的，因为图标的大小单位是<code>px</code>，不是自适应单位，字体单位是<code>rpx</code>，可以自适应，这显得图标非常小，那么我们要怎么解决呢？</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6bf30f92eb5045988d9848300ce30f0f~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220405205920657" loading="lazy"></p>
<p>当然，<code>uView</code>是可以更改<code>默认单位配置</code>，官方文档有教怎么<a href="https://www.uviewui.com/components/setting.html" target="_blank" rel="noopener noreferrer">配置</a>。</p>
<p><img src="https://s2.loli.net/2022/04/07/cUf78C6LQaJW4Oj.png" alt="image-20220407151022934" loading="lazy"></p>
<p>只不过产生了更难受的问题，像<code>u-loadmore</code>这个组件，加载图标变得非常的小，还没有配置项去改，还有<code>u-button</code>前置图标等等同样的问题，希望官方能尽快修复下。</p>
<p><img src="https://s2.loli.net/2022/04/07/n7C1cAItxemB9rb.png" alt="12313" loading="lazy"></p>
<p><img src="https://s2.loli.net/2022/04/07/vXfskazA5eiT4KY.png" alt="141414" loading="lazy"></p>
<p><strong>第二种方法</strong>就是自己根据需要去转换单位，<code>uView</code>也提供了相应的方法供我们去转换</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/360bbc12ae4d4d97840e61fe4fd77bfb~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220405212257500" loading="lazy"></p>
<p>但我们手动去实现也是很简单的，我们就用我们上面封装的一个方法，然后在组件中使用它，我们传的是<code>rpx</code>数值，最终根据<strong>屏幕宽度</strong>自适应地转换成对应<code>px</code>数值。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dc06e4b9ab984fecb6ac4f86b6630bbe~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220405210849642" loading="lazy"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f87cd8ae12d4443da2ccdb292ad1ed2c~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220405210615913" loading="lazy"></p>
<p>效果是可以不管在哪台设备上，都能实现自适应大小。</p>
<h2 id="补充"> 补充</h2>
<p>如果在项目中大量使用单位转换的话，像频繁使用<code>uView</code>中的组件，使用封装的单位转换方法，我们是可以考虑做一下优化的。</p>
<p>因为是<code>Vue2</code>项目嘛，我们可以采用<code>Vue</code>原型挂载或者<code>全局混入</code>，这里我们采用<strong>全局混入</strong>。</p>
<p><strong><code>mixin.js</code></strong>：</p>
<div><pre><code><span>export</span> <span>const</span> globalMixin <span>=</span> <span>{</span>
  <span>// rpx转px</span>
  <span>methods</span><span>:</span> <span>{</span>
    <span>rpxToPx</span><span>(</span><span>rpx</span><span>)</span> <span>{</span>
      <span>const</span> screenWidth <span>=</span> uni<span>.</span><span>getSystemInfoSync</span><span>(</span><span>)</span><span>.</span>screenWidth
      <span>return</span> <span>(</span>rpx <span>*</span> Number<span>.</span><span>parseInt</span><span>(</span>screenWidth<span>)</span><span>)</span> <span>/</span> <span>750</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p><strong><code>main.js</code></strong>：</p>
<div><pre><code><span>import</span> <span>{</span> globalMixin <span>}</span> <span>from</span> <span>"@/mixin.js"</span>
Vue<span>.</span><span>mixin</span><span>(</span>globalMixin<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>然后，我们就可在项目中随意使用他们了。</p>
<h2 id="结语"> 结语</h2>
<p>感谢读完本篇文章，希望对你能有所帮助，如有问题欢迎各位在评论区指正。</p>
<p>创作不易，希望点个赞支持一下❤️❤️。</p>
]]></content:encoded>
      <enclosure url="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/be961912453145489585042b178c6606~tplv-k3u1fbpfcp-zoom-1.image" type="image/"/>
    </item>
    <item>
      <title>VSCode工作区指南：回归轻量，成为全能编辑器</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vscode/VSCode%E5%B7%A5%E4%BD%9C%E5%8C%BA%E6%8C%87%E5%8D%97%EF%BC%9A%E5%9B%9E%E5%BD%92%E8%BD%BB%E9%87%8F%EF%BC%8C%E6%88%90%E4%B8%BA%E5%85%A8%E8%83%BD%E7%BC%96%E8%BE%91%E5%99%A8/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vscode/VSCode%E5%B7%A5%E4%BD%9C%E5%8C%BA%E6%8C%87%E5%8D%97%EF%BC%9A%E5%9B%9E%E5%BD%92%E8%BD%BB%E9%87%8F%EF%BC%8C%E6%88%90%E4%B8%BA%E5%85%A8%E8%83%BD%E7%BC%96%E8%BE%91%E5%99%A8/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/rss.xml">VSCode工作区指南：回归轻量，成为全能编辑器</source>
      <category>VSCode</category>
      <pubDate>Fri, 18 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="为什么要用vscode工作区"> 为什么要用VSCode工作区</h2>
<p><code>VSCode</code>作为宇宙第一编辑器（我自个取的），不仅仅是<code>前端开发</code>利器，而且像<code>Python</code>开发和<code>c/cpp</code>开发体验也是非常的棒，甚至有人会用vscode写<code>Java</code>。vscode不是<code>IDE</code>，它的很多功能并非集成的，但vscode拥有非常好的扩展性和它的强大社区提供的扩展市场。用户可以根据自身需要自由地安装扩展，使得vscode非常的轻量、快速，这也是很多人喜欢它的原因。</p>
<p><img src="https://s2.loli.net/2022/02/18/CWHXk3PhJcG8E49.png" alt="image-20220218162149522" loading="lazy"></p>
<p><img src="https://s2.loli.net/2022/02/18/t8L3s9nGikWBjyx.png" alt="image-20220218125559270" loading="lazy"></p>
<p><img src="https://s2.loli.net/2022/02/18/BUKwHScsIZ4bGO8.png" alt="image-20220218125634004" loading="lazy"></p>
<p>但是随着vscode的扩展装的越来越多，变得非常难以管理，比如说：我在做<code>前端开发</code>的时候，那么我们的<code>python</code>插件就不需要了，我们可以选择开启，但这个插件明显会占用不必要的<code>cpu资源</code>，大多数人会选择关闭，用的时候再打开，其实这样也不是好的办法，这只是一个插件，但<code>python</code>开发的插件可不止一个，并且还有<code>c/cpp</code>的插件等要管理，那么就会变得非常麻烦了。</p>
<p>VSCode工作区就是为此诞生的。你可以把自定义地创建工作区，比如把<code>python</code>作为一个工作区，<code>cpp</code>作为一个工作区，<code>前端开发</code>也是可以根据需要分为好几个工作区，并且你可以控制扩展在工作区的<code>启用</code>和<code>禁用</code>，这也是工作区最大的优点之一。</p>
<p>来看一下最终效果：</p>
<p><img src="https://s2.loli.net/2022/02/18/a6PGCZSvDieMrRl.gif" alt="1" loading="lazy"></p>
<h2 id="工作区创建"> 工作区创建</h2>
<h3 id="创建一个工作区"> 创建一个工作区</h3>
<p>我们先打开了<code>React</code>文件夹，点击菜单栏中的文件，<strong>将工作区另存为</strong>就是创建工作区，然后会生成<code>.code-workspace</code>的文件，名字可以自定义，建议可以自己创建一个文件夹来专门存储这些文件，建好后，我们就在这个工作区下了，可以看到<code>React</code>文件夹。</p>
<p><img src="https://s2.loli.net/2022/02/18/IhgXupHyqtwJfCR.gif" alt="2" loading="lazy"></p>
<h3 id="添加项目至工作区"> 添加项目至工作区</h3>
<p>我们可以在工作区打开多个项目，根据自己需要进行添加或删除，这也是工作区的优点之一。</p>
<p><img src="https://s2.loli.net/2022/02/18/C6uPg5joeDqcdYa.gif" alt="3" loading="lazy"></p>
<h3 id="在工作区启用或禁用扩展"> 在工作区启用或禁用扩展</h3>
<p><strong>重点来了</strong>，有了工作区，你就可以根据需要是否在工作区开启或禁止某个扩展，我觉得的这是最好的功能之一，这不仅可以减少不必要的<code>内存占用</code>，也可以阻止其他不相关插件对开发的影响，尤其是<code>snippets</code>类插件。</p>
<p>我的建议是只启用某些公用的插件，像<code>Chinese (Simplified) (简体中文)</code>等，一些针对性的插件只在工作区开启。</p>
<p><img src="https://s2.loli.net/2022/02/18/oaBZ9wkWgtXYfsU.gif" alt="4" loading="lazy"></p>
<h3 id="切换工作区"> 切换工作区</h3>
<p>切换工作区也很简单，在菜单栏中的<strong>从文件打开工作区</strong>。</p>
<p><img src="https://s2.loli.net/2022/02/18/FoMWa5ugy1KhVmN.gif" alt="6" loading="lazy"></p>
<h2 id="工作区配置"> 工作区配置</h2>
<p>如果没有开启工作区，我们就只有<code>用户</code>和<code>文件夹(.vscode)</code>两种级别设置，打开了工作区，就会新增一个<code>工作区</code>设置，我们可以在这个工作区编写相关的<code>设置</code>和<code>调试配置</code>。</p>
<p><img src="https://s2.loli.net/2022/02/18/5F6yh9EnLpzXvRg.gif" alt="5" loading="lazy"></p>
<p>很多人一开始会对这几个级别的配置理解的比较混乱，其实这东西很好理解，三者的关系特别像<code>css</code>的<code>继承</code>和<code>权重</code>。用户的权重最低，作用范围大；文件夹的权重最高，作用范围小，三者有继承关系。</p>
<p>比如说：如果你没有写工作区的设置，那么就会继承用户的设置，所以你在工作区只需要写写有差别的配置，这些会覆盖用户的配置，重复的就不用写，文件夹同理。</p>
<Mermaid id="mermaid-382ee222" data-code="graph%20LR%3B%0A%09A(%E7%94%A8%E6%88%B7)--%3E%7C%E7%BB%A7%E6%89%BF%7C%20B(%E5%B7%A5%E4%BD%9C%E5%8C%BA)%0A%09B(%E5%B7%A5%E4%BD%9C%E5%8C%BA)--%E8%A6%86%E7%9B%96--%3EA(%E7%94%A8%E6%88%B7)%0A%09B(%E5%B7%A5%E4%BD%9C%E5%8C%BA)--%3E%7C%E7%BB%A7%E6%89%BF%7C%20C(%E6%96%87%E4%BB%B6%E5%A4%B9)%0A%09C(%E6%96%87%E4%BB%B6%E5%A4%B9)--%E8%A6%86%E7%9B%96--%3EB(%E5%B7%A5%E4%BD%9C%E5%8C%BA)%0A"></Mermaid><h2 id="project-manager"> Project Manager</h2>
<p>在上面的配置下来后，已经是比较好用了，不过还不够强大，操作起来有点点小麻烦，接下来我们去安装一个扩展，这个扩展和VSCode工作区可谓是<code>天生一对</code>，超级好用。</p>
<p><img src="https://s2.loli.net/2022/02/18/ikPpeHNBzLWFOd7.png" alt="image-20220218155846316" loading="lazy"></p>
<p>这个扩展安装量也是比较高的，最后更新日期是<code>2022/2/9</code>，说明有在积极维护，评分也是全五星。</p>
<p>安装好了后，会在左侧菜单多一个文件夹图标。</p>
<p><img src="https://s2.loli.net/2022/02/18/7a2V1vc3wEytUIT.png" alt="image-20220218160128470" loading="lazy"></p>
<p>我们把之前新建的<code>React</code>工作区加进来，这个插件可以很方便我们切换工作区，并且提供了标签的一些功能，当然还有远程项目的功能，不过我们只说跟工作区相关的，其他的不多说了。</p>
<p><img src="https://s2.loli.net/2022/02/18/IOuJfCbd4zMNHiD.gif" alt="8" loading="lazy"></p>
<p>我们也可以发现，在切换工作区的时候，vscode可以保持文件在之前的打开状态，甚至文件夹的折叠和开启都能保持，这极大地提高我们的开发效率。它也不仅仅能保存工作区，也能保存文件夹，即使你不用<code>工作区</code>，也强烈推荐。</p>
<h2 id="最后"> 最后</h2>
<p>感谢读完本篇文章，希望对你能有所帮助，如有疑问欢迎各位在评论区讨论❤️❤️。</p>
]]></content:encoded>
      <enclosure url="https://s2.loli.net/2022/02/18/CWHXk3PhJcG8E49.png" type="image/png"/>
    </item>
    <item>
      <title>vue3引入element-plus报错解决方案</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vue/vue3%E5%BC%95%E5%85%A5element-plus%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vue/vue3%E5%BC%95%E5%85%A5element-plus%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/rss.xml">vue3引入element-plus报错解决方案</source>
      <category>Vue</category>
      <pubDate>Sun, 23 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[
<h2 id="起因"> 起因</h2>
<p>最近，<strong>尤雨溪</strong>宣布<strong>vue3 将在 2022 年 2 月 7 号成为新的默认版本</strong>！对于我这个老写 vue2 的人来说，着实想去体验一下 vue3。于是乎，我复习了一下 vue3 的知识，并用传统 vue-cli 方式建了一个 vue3 的项目，既然是写 vue3，当然得试试 vue3 的组件库了，然后我就选择了大名鼎鼎的<code>element-ui</code>，vue3 版的<code>element-ui</code>已经改叫<code>element-plus</code>了。但是，我按照官方文档做法安装、引入，却报错了。</p>
<p>这是新建好的项目结构，跟 vue2 没什么区别</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd6d100a4af14cf28f72bfaa1a75d2d0~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220124125123788" loading="lazy"></p>
<p>然后我试了下引入完整版的方法，毕竟只是学习用，不是真正的企业项目开发，依照三步<code>安装</code>、<code>引入</code>、<code>运行</code>。</p>
<div><pre><code>npm install element-plus --save
</code></pre>
<div><span>1</span><br></div></div><div><pre><code><span>import</span> <span>{</span> createApp <span>}</span> <span>from</span> <span>"vue"</span><span>;</span>
<span>import</span> ElementPlus <span>from</span> <span>"element-plus"</span><span>;</span>
<span>import</span> <span>"element-plus/dist/index.css"</span><span>;</span>
<span>import</span> App <span>from</span> <span>"./App.vue"</span><span>;</span>

<span>const</span> app <span>=</span> <span>createApp</span><span>(</span>App<span>)</span><span>;</span>

app<span>.</span><span>use</span><span>(</span>ElementPlus<span>)</span><span>;</span>
app<span>.</span><span>mount</span><span>(</span><span>"#app"</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/42217feb3de8495caf82f28e7f55d30d~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220124131131353" loading="lazy"></p>
<div><pre><code>npm run serve
</code></pre>
<div><span>1</span><br></div></div><p>然后就报错了</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bfd76a287a50470f80703ee6f0616bf3~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220124125821157" loading="lazy"></p>
<p>说啥缺少什么<code>loader</code>，我英语也不太好，后来我就去上网查报错的原因，有的博客说新版的<code>element-plus</code>要用<code>vue add element-plus</code>才行。但我就想用<code>npm</code>方式去安装，弄了一个晚上，终于研究明白了。</p>
<h2 id="解决方法"> 解决方法</h2>
<p>其实很简单，就是降低一下<code>element-plus</code>的版本，我们不指定版本它默认会安装最新的版本，我们可以降一下版本，然后说一下我的<code>vue-cli</code>版本 <code>4.5.13</code>。</p>
<p>我们去看一下<code>element-plus</code>npm 版本页面</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/20261cbb7e224cfeb7fa0ae8b3b195c7~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220124131334397" loading="lazy"></p>
<p>我们就挑一个最近下载量比较高的版本<code>1.3.0-beta.5</code>,更新一下即可。</p>
<div><pre><code>npm install element-plus@1.3.0-beta.5 --save
</code></pre>
<div><span>1</span><br></div></div><p>然后我们就成功了。</p>
<p>当然我们也可以试一下另一种解决方案，这个作者也没试过，看别人是可以成功的，有想用这个的，可以自己去试一试。</p>
<div><pre><code>vue add element-plus
</code></pre>
<div><span>1</span><br></div></div><h2 id="最后"> 最后</h2>
<p>如果本篇文章对你有帮助，麻烦点个赞，谢谢。</p>
]]></content:encoded>
      <enclosure url="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd6d100a4af14cf28f72bfaa1a75d2d0~tplv-k3u1fbpfcp-zoom-1.image" type="image/"/>
    </item>
    <item>
      <title>解放双手！实现 element-plus 自动按需导入的最新方式</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/vue/%E8%A7%A3%E6%94%BE%E5%8F%8C%E6%89%8B%EF%BC%81%E5%AE%9E%E7%8E%B0element-plus%E8%87%AA%E5%8A%A8%E6%8C%89%E9%9C%80%E5%AF%BC%E5%85%A5%E7%9A%84%E6%9C%80%E6%96%B0%E6%96%B9%E5%BC%8F/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/vue/%E8%A7%A3%E6%94%BE%E5%8F%8C%E6%89%8B%EF%BC%81%E5%AE%9E%E7%8E%B0element-plus%E8%87%AA%E5%8A%A8%E6%8C%89%E9%9C%80%E5%AF%BC%E5%85%A5%E7%9A%84%E6%9C%80%E6%96%B0%E6%96%B9%E5%BC%8F/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/rss.xml">解放双手！实现 element-plus 自动按需导入的最新方式</source>
      <category>Vue</category>
      <pubDate>Mon, 24 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="开始"> 开始</h2>
<p>本篇文章教大家一种全新的按需导入<code>element-plus</code>的方法，不同于传统的按需导入，这种全新的按需导入可以说是真正的解放双手，配置起来也是超级简单。有的小伙伴在安装导入<code>element-plus</code>的时候可能会报错，可以看一下我的另一篇博客<a href="https://juejin.cn/post/7056661461069725727" target="_blank" rel="noopener noreferrer">vue3 引入 element-plus 报错解决方案</a></p>
<blockquote>
<p><strong>划重点</strong>：是自动按需导入，<strong>自动</strong>，不是手动按需导入</p>
</blockquote>
<h2 id="手动按需导入"> 手动按需导入</h2>
<p>我们先来演示下传统的手动按需引入，就是在每个需要使用组件库的页面按照三步<code>引入</code>、<code>注册</code>、<code>使用</code>，每使用一个组件，就要这三步，真是相当的麻烦。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ce8b425330e44b70ab4ebd10a359771f~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220124133955427" loading="lazy"></p>
<h2 id="自动按需导入"> 自动按需导入</h2>
<p>自动当然就是什么都不用干了，我们先看一下<a href="https://element-plus.gitee.io/zh-CN/guide/quickstart.html#%E5%AE%8C%E6%95%B4%E5%BC%95%E5%85%A5" target="_blank" rel="noopener noreferrer">element-plus 的官方文档</a>，官方也是推荐这种方式的</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a6c8daeea9094417b9ddc99ceda2a74e~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220124134425363" loading="lazy"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/186abf1bde1a4f8c9155e3bad0e17f31~tplv-k3u1fbpfcp-zoom-1.image" alt="image-20220124134831303" loading="lazy"></p>
<p>我们按照图示的方法做一下</p>
<h5 id="_1、安装unplugin-vue-components和unplugin-auto-import"> 1、安装<code>unplugin-vue-components</code>和<code>unplugin-auto-import</code></h5>
<div><pre><code>npm install -D unplugin-vue-components unplugin-auto-import
</code></pre>
<div><span>1</span><br></div></div><h5 id="_2、配置vue-config-js"> 2、配置<code>vue.config.js</code></h5>
<p>这里只说一下<code>webpack</code>的方式，<code>vite</code>方式可以自己去看一下官方文档。</p>
<div><pre><code><span>const</span> AutoImport <span>=</span> <span>require</span><span>(</span><span>"unplugin-auto-import/webpack"</span><span>)</span><span>;</span>
<span>const</span> Components <span>=</span> <span>require</span><span>(</span><span>"unplugin-vue-components/webpack"</span><span>)</span><span>;</span>
<span>const</span> <span>{</span> ElementPlusResolver <span>}</span> <span>=</span> <span>require</span><span>(</span><span>"unplugin-vue-components/resolvers"</span><span>)</span><span>;</span>

module<span>.</span>exports <span>=</span> <span>{</span>
  <span>lintOnSave</span><span>:</span> <span>false</span><span>,</span> <span>// 关闭语法检查</span>
  <span>configureWebpack</span><span>:</span> <span>{</span>
    <span>plugins</span><span>:</span> <span>[</span>
      <span>AutoImport</span><span>(</span><span>{</span>
        <span>resolvers</span><span>:</span> <span>[</span><span>ElementPlusResolver</span><span>(</span><span>)</span><span>]</span><span>,</span>
      <span>}</span><span>)</span><span>,</span>
      <span>Components</span><span>(</span><span>{</span>
        <span>resolvers</span><span>:</span> <span>[</span><span>ElementPlusResolver</span><span>(</span><span>)</span><span>]</span><span>,</span>
      <span>}</span><span>)</span><span>,</span>
    <span>]</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>之前版本好像会生成<code>auto-import.d.ts</code>和<code>components.d.ts</code>，但现在好像是没有了。总的来说，我们就只改动一个<code>vue.config.js</code></p>
<blockquote>
<p><strong>注意</strong>：当我们改了<code>vue.config.js</code>配置时，要关掉之前的项目，重新<code>npm run serve</code>，才能生效。</p>
</blockquote>
<p>到这，我们就配置好了。 你没听错，到这结束了，是不是超级简单</p>
<p>然后我们来试验一下，这里，我没有在<code>main.js</code>引入<code>element-plus</code>，也没有在<code>App.vue</code>做相关的引入。</p>
<p><img src="https://s2.loli.net/2022/01/24/Cg7uYJS9TK3IObR.gif" alt="动画" loading="lazy"></p>
<h2 id="最后"> 最后</h2>
<p>本篇文章只是讲了下<code>element-plus</code>的自动按需导入，好像<code>ant design vue</code>、<code>Vant</code>等流行组件库都是可以的，大家可以自行地去研究下。</p>
]]></content:encoded>
      <enclosure url="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ce8b425330e44b70ab4ebd10a359771f~tplv-k3u1fbpfcp-zoom-1.image" type="image/"/>
    </item>
  </channel>
</rss>